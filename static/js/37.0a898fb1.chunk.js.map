{"version":3,"file":"static/js/37.0a898fb1.chunk.js","mappings":"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","sources":["maps/EarthquakeMap.jsx","../node_modules/react-leaflet/lib/Circle.js","../node_modules/@react-leaflet/core/lib/circle.js","../node_modules/react-leaflet/lib/FeatureGroup.js","../node_modules/@react-leaflet/core/lib/dom.js","../node_modules/react-leaflet/lib/Pane.js","../node_modules/react-leaflet/lib/Tooltip.js"],"sourcesContent":["import React, { useRef, useState } from \"react\";\nimport indiastates from \"../data/indiaStates.json\";\nimport EarthquakeStations from \"../data/EarthquakeStations.json\";\nimport MajorEarthquakes from \"../data/MajorEarthquakes.json\";\nimport EarthquakeZones from \"../data/EarthquakeZones.json\";\nimport EarthquakeFaults from \"../data/EarthquakeFaults.json\";\nimport { setWindowWidth } from \"../utilities/Functions\";\nimport { setInitialMapZoom } from \"../utilities/Functions\";\nimport { setDragging } from \"../utilities/Functions\";\nimport indiaDistrict from \"../data/indiaDistrict.json\"\n\n\nimport {\n    MapContainer,\n    useMapEvents,\n    GeoJSON,\n    FeatureGroup,\n    ScaleControl,\n    Circle,\n    Tooltip,\n    Pane,\n} from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-fullscreen/dist/Leaflet.fullscreen.js\";\nimport \"leaflet-fullscreen/dist/leaflet.fullscreen.css\";\nimport ExportMapButton from \"../components/ExportMapButton\";\nimport LayerControlBtn from \"../components/LayerControlBtn\";\n\n\nconst Legend = ({ baseLayers }) => {\n    const EarthquakeZonesLegend = [\n        { color: \"skyblue\", label: \"Zone II: Low Damage Risk Zone\" },\n        { color: \"yellow\", label: \"Zone III: Moderate Damage Zone\" },\n        { color: \"orange\", label: \"Zone IV: High Damage Risk Zone\" },\n        { color: \"red\", label: \"Zone V: Very High Damage Risk Zone\" },\n    ];\n    const EarthquakeFaultsLegend = [{ color: \"blue\", label: \"Earthquake Faults\" }];\n    const EarthquakeStationsLegend = [{ color: \"brown\", label: \"Earthquake Stations\" }];\n    const MajorEarthquakesLegend = [{ color: \"green\", label: \"Major Earthquakes\" }];\n\n    return (\n        <>\n            {baseLayers.length > 0 && (\n                <div className=\"legend_container\">\n                    <h5>Legends</h5>\n                    {baseLayers.includes(\"EarthquakeZones\") && (\n                        <div>\n                            {EarthquakeZonesLegend.map((item) => (\n                                <div key={item.color} className=\"legend_item\">\n                                    <span\n                                        className=\"legend_item_square\"\n                                        style={{ backgroundColor: item.color }}\n                                    />\n                                    <span className=\"legend-label\">{item.label}</span>\n                                </div>\n                            ))}\n                        </div>\n                    )}\n                    {baseLayers.includes(\"EarthquakeFaults\") && (\n                        <div>\n                            {EarthquakeFaultsLegend.map((item) => (\n                                <div key={item.color} className=\"legend_item\">\n                                    <span\n                                        className=\"legend_item_square\"\n                                        style={{ backgroundColor: item.color }}\n                                    />\n                                    <span className=\"legend-label\">{item.label}</span>\n                                </div>\n                            ))}\n                        </div>\n                    )}\n                    {baseLayers.includes(\"EarthquakeStations\") && (\n                        <div>\n                            {EarthquakeStationsLegend.map((item) => (\n                                <div key={item.color} className=\"legend_item\">\n                                    <span\n                                        className=\"legend_item_square\"\n                                        style={{ backgroundColor: item.color }}\n                                    />\n                                    <span className=\"legend-label\">{item.label}</span>\n                                </div>\n                            ))}\n                        </div>\n                    )}\n                    {baseLayers.includes(\"MajorEarthquakes\") && (\n                        <div>\n                            {MajorEarthquakesLegend.map((item) => (\n                                <div key={item.color} className=\"legend_item\">\n                                    <span\n                                        className=\"legend_item_square\"\n                                        style={{ backgroundColor: item.color }}\n                                    />\n                                    <span className=\"legend-label\">{item.label}</span>\n                                </div>\n                            ))}\n                        </div>\n                    )}\n\n                </div>\n            )}\n        </>\n    );\n};\n\nconst EarthquakeMap = () => {\n    const [mousePosition, setMousePosition] = useState({ lat: 0, lng: 0 });\n    const mapContainerRef = useRef(null);\n\n    const HandleMouseHover = () => {\n        useMapEvents({\n            mousemove: (e) => {\n                setMousePosition(e.latlng);\n            },\n        });\n\n        return null;\n    };\n\n    function onEachFeatureDistricts(feature, layer) {\n        layer.on(\"mouseover\", function (e) {\n            if (feature.properties && feature.properties.District) {\n                const popupContent = `\n          <div>\n          State: ${feature.properties.STATE}<br/>\n          District: ${feature.properties.District}<br/>\n          </div>\n        `;\n                layer.bindTooltip(popupContent, { sticky: true });\n            }\n            layer.openTooltip();\n        });\n\n        layer.on(\"mouseout\", function () {\n            layer.closeTooltip();\n        });\n    }\n\n    const earthquakeZonesDensity = (ZONE) => {\n        return ZONE === \"ZONE II: LOW DAMAGE RISK ZONE\"\n            ? \"skyblue\"\n            : ZONE === \"ZONE III: MODERATE DAMAGE ZONE\"\n                ? \"yellow\"\n                : ZONE === \"ZONE IV: HIGH DAMAGE RISK ZONE\"\n                    ? \"orange\"\n                    : ZONE === \"ZONE V: VERY HIGH DAMAGE RISK ZONE\"\n                        ? \"red\"\n                        : \"black\";\n    };\n    const earthquakeZonesStyle = (feature) => {\n        return {\n            fillColor: earthquakeZonesDensity(feature.properties.ZONE),\n            weight: 1,\n            opacity: 1,\n            color: \"black\",\n            dashArray: '2',\n            fillOpacity: 1,\n            interactive: false,\n        };\n    };\n\n    const [baseLayers, setBaseLayers] = useState([\n        \"EarthquakeZones\",\n        \"EarthquakeFaults\",\n        \"EarthquakeStations\",\n        \"MajorEarthquakes\"\n\n    ]);\n\n\n    const layersItems = [\n        { value: \"indiaDistrict\", label: \"India Districts\" },\n        { value: \"EarthquakeZones\", label: \"Earthquake Zones\" },\n        { value: \"EarthquakeFaults\", label: \"Earthquake Faults\" },\n        { value: \"MajorEarthquakes\", label: \"Major Earthquakes\" },\n        { value: \"EarthquakeStations\", label: \"Earthquake Stations\" },\n    ];\n\n    const [singlebaseLayer, setSingleBaseLayer] = useState(\"\");\n    const singleLayerItems = [\n\n\n\n    ];\n\n    return (\n        <div className=\"main_page_container\">\n            <div className=\"row\">\n                <div className=\"col-md-3\">\n                    <div className=\"info_container\">\n                        <h3>Earthquake</h3>\n                        <p>\n                            India, located in a seismically active zone, is prone to\n                            earthquakes. These sudden and violent shaking of the ground occur\n                            due to the movement of tectonic plates beneath the Earth's\n                            surface. Earthquakes can vary in magnitude and intensity, and\n                            their impact depends on factors such as depth, location, and\n                            population density. In India, regions like the Himalayas, the\n                            northeastern states, and parts of Gujarat are particularly\n                            susceptible to earthquakes. To minimize the damage caused by\n                            earthquakes, India has implemented measures like seismic zoning,\n                            construction guidelines for earthquake-resistant buildings, and\n                            public awareness campaigns to educate people on safety protocols\n                            during seismic events.\n                        </p>\n                    </div>\n                </div>\n\n                <div className=\"col-md-9\">\n                    <div className=\"map_container\" ref={mapContainerRef}>\n                        <MapContainer\n                            center={[22, 84]}\n                            fullscreenControl={true}\n                            zoom={setInitialMapZoom()}\n                            style={setWindowWidth()}\n                            attributionControl={false}\n                            scrollWheelZoom={false}\n                            zoomDelta={0.25}\n                            zoomSnap={0}\n                            minZoom={3}\n                            keyboard={false}\n                            dragging={setDragging()}\n                            // touchZoom={false}\n                            doubleClickZoom={false}\n                            maxZoom={9}\n                        >\n                            <HandleMouseHover />\n                            <ScaleControl />\n                            <Pane name=\"indiastates_pane\" style={{ zIndex: -3 }}>\n                                <GeoJSON\n                                    data={indiastates.features}\n                                    style={{\n                                        fillColor: \"#84857e\",\n                                        fillOpacity: 0.5,\n                                        weight: 2,\n                                        color: \"whitesmoke\",\n                                        interactive: false,\n                                    }}\n                                />\n                            </Pane>\n                            <LayerControlBtn setBaseLayers={setBaseLayers} baseLayers={baseLayers} layersItems={layersItems} singlebaseLayer={singlebaseLayer} setSingleBaseLayer={setSingleBaseLayer} singleLayerItems={singleLayerItems} />\n\n\n                            <Pane name=\"EarthquakeZones_pane\" style={{ zIndex: -2 }}>\n                                {baseLayers.includes(\"EarthquakeZones\") && (\n                                    <GeoJSON\n                                        data={EarthquakeZones.features}\n                                        style={earthquakeZonesStyle}\n                                    />\n                                )}\n                            </Pane>\n\n                            <Pane name=\"indiaDistrict_pane\" style={{ zIndex: -1 }}>\n                                {baseLayers.includes(\"indiaDistrict\") && (\n                                    <GeoJSON\n                                        data={indiaDistrict.features}\n                                        style={{\n                                            fillColor: \"black\",\n                                            weight: 1,\n                                            opacity: 1,\n                                            color: 'black',\n                                            dashArray: '2',\n                                            fillOpacity: 0.0000000001\n                                        }}\n                                        onEachFeature={onEachFeatureDistricts}\n                                    />\n                                )}\n                            </Pane>\n\n\n                            {baseLayers.includes(\"EarthquakeFaults\") && (\n                                <GeoJSON\n                                    data={EarthquakeFaults.features}\n                                    style={{\n                                        fillColor: \"none\",\n                                        weight: 2,\n                                        color: \"blue\",\n                                        interactive: false,\n                                    }}\n                                />\n                            )}\n\n\n\n                            {baseLayers.includes(\"MajorEarthquakes\") && (\n                                <FeatureGroup>\n                                    {MajorEarthquakes.features.map((station, index) => {\n                                        const magnitude = station.properties.MAGNITUDE;\n\n                                        // const minMagnitude = 6;\n                                        // const maxMagnitude = 8;\n                                        // const minRadius = 1000;\n                                        // const maxRadius = 5000;\n                                        // const radius = ((magnitude - minMagnitude) / (maxMagnitude - minMagnitude)) * (maxRadius - minRadius) + minRadius;\n                                        const radius = ((magnitude - 5) / 2) * 40000;\n\n                                        return (\n                                            <Circle\n                                                key={index}\n                                                center={[\n                                                    station.geometry.coordinates[1],\n                                                    station.geometry.coordinates[0],\n                                                ]}\n                                                radius={radius}\n                                                color=\"green\"\n                                                fillColor=\"green\"\n                                                fillOpacity={1}\n                                            >\n                                                <Tooltip sticky>\n                                                    <div className=\"popup_content\">\n                                                        <h6>Major Earthquake</h6>\n                                                        <p>DATE: {station.properties.DATE}</p>\n                                                        <p>LOCATION: {station.properties.LOCATION}</p>\n                                                        <p>MAGNITUDE: {station.properties.MAGNITUDE}</p>\n                                                    </div>\n                                                </Tooltip>\n                                            </Circle>\n                                        );\n                                    })}\n                                </FeatureGroup>\n                            )}\n\n                            {baseLayers.includes(\"EarthquakeStations\") && (\n                                <FeatureGroup>\n                                    {EarthquakeStations.features.map((station, index) => {\n                                        return (\n                                            <Circle\n                                                key={index}\n                                                center={[\n                                                    station.geometry.coordinates[1],\n                                                    station.geometry.coordinates[0],\n                                                ]}\n                                                radius={1800}\n                                                color=\"brown\"\n                                                fillColor=\"brown\"\n                                            >\n                                                <Tooltip sticky>\n                                                    <div className=\"popup_content\">\n                                                        <h6>Earthquake Station</h6>\n                                                        <p>STATION: {station.properties.STATION}</p>\n                                                        <p>CODE: {station.properties.CODE}</p>\n                                                        <p>STATE_UT: {station.properties.STATE_UT}</p>\n                                                    </div>\n                                                </Tooltip>\n                                            </Circle>\n                                        );\n                                    })}\n                                </FeatureGroup>\n                            )}\n\n\n                            <ExportMapButton\n                                mapContainerRef={mapContainerRef}\n                                mapTitle=\"Natural Disaster: Earthquake\"\n\n                            />\n\n                            <div className=\"desktop_legend_container\">\n                                {baseLayers && <Legend baseLayers={baseLayers} />}\n                            </div>\n\n                            <div className=\"coordinate_container\">\n                                Lat: {mousePosition.lat.toFixed(4)}, Long:{\" \"}\n                                {mousePosition.lng.toFixed(4)}\n                            </div>\n                        </MapContainer>\n                        <div className=\"phone_legend_container\">\n                            {baseLayers && <Legend baseLayers={baseLayers} />}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default EarthquakeMap;\n","import { createElementObject, createPathComponent, extendContext, updateCircle } from '@react-leaflet/core';\nimport { Circle as LeafletCircle } from 'leaflet';\nexport const Circle = createPathComponent(function createCircle({ center , children: _c , ...options }, ctx) {\n    const circle = new LeafletCircle(center, options);\n    return createElementObject(circle, extendContext(ctx, {\n        overlayContainer: circle\n    }));\n}, updateCircle);\n","export function updateCircle(layer, props, prevProps) {\n    if (props.center !== prevProps.center) {\n        layer.setLatLng(props.center);\n    }\n    if (props.radius != null && props.radius !== prevProps.radius) {\n        layer.setRadius(props.radius);\n    }\n}\n","import { createElementObject, createPathComponent, extendContext } from '@react-leaflet/core';\nimport { FeatureGroup as LeafletFeatureGroup } from 'leaflet';\nexport const FeatureGroup = createPathComponent(function createFeatureGroup({ children: _c , ...options }, ctx) {\n    const group = new LeafletFeatureGroup([], options);\n    return createElementObject(group, extendContext(ctx, {\n        layerContainer: group,\n        overlayContainer: group\n    }));\n});\n","import { DomUtil } from 'leaflet';\nfunction splitClassName(className) {\n    return className.split(' ').filter(Boolean);\n}\nexport function addClassName(element, className) {\n    splitClassName(className).forEach((cls)=>{\n        DomUtil.addClass(element, cls);\n    });\n}\nexport function removeClassName(element, className) {\n    splitClassName(className).forEach((cls)=>{\n        DomUtil.removeClass(element, cls);\n    });\n}\nexport function updateClassName(element, prevClassName, nextClassName) {\n    if (element != null && nextClassName !== prevClassName) {\n        if (prevClassName != null && prevClassName.length > 0) {\n            removeClassName(element, prevClassName);\n        }\n        if (nextClassName != null && nextClassName.length > 0) {\n            addClassName(element, nextClassName);\n        }\n    }\n}\n","import { LeafletProvider, addClassName, useLeafletContext } from '@react-leaflet/core';\nimport React, { forwardRef, useState, useEffect, useImperativeHandle, useMemo } from 'react';\nimport { createPortal } from 'react-dom';\nconst DEFAULT_PANES = [\n    'mapPane',\n    'markerPane',\n    'overlayPane',\n    'popupPane',\n    'shadowPane',\n    'tilePane',\n    'tooltipPane'\n];\nfunction omitPane(obj, pane) {\n    const { [pane]: _p , ...others } = obj;\n    return others;\n}\nfunction createPane(name, props, context) {\n    if (DEFAULT_PANES.indexOf(name) !== -1) {\n        throw new Error(`You must use a unique name for a pane that is not a default Leaflet pane: ${name}`);\n    }\n    if (context.map.getPane(name) != null) {\n        throw new Error(`A pane with this name already exists: ${name}`);\n    }\n    const parentPaneName = props.pane ?? context.pane;\n    const parentPane = parentPaneName ? context.map.getPane(parentPaneName) : undefined;\n    const element = context.map.createPane(name, parentPane);\n    if (props.className != null) {\n        addClassName(element, props.className);\n    }\n    if (props.style != null) {\n        Object.keys(props.style).forEach((key)=>{\n            // @ts-ignore\n            element.style[key] = props.style[key];\n        });\n    }\n    return element;\n}\nfunction PaneComponent(props, forwardedRef) {\n    const [paneName] = useState(props.name);\n    const [paneElement, setPaneElement] = useState(null);\n    useImperativeHandle(forwardedRef, ()=>paneElement, [\n        paneElement\n    ]);\n    const context = useLeafletContext();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const newContext = useMemo(()=>({\n            ...context,\n            pane: paneName\n        }), [\n        context\n    ]);\n    useEffect(()=>{\n        setPaneElement(createPane(paneName, props, context));\n        return function removeCreatedPane() {\n            const pane = context.map.getPane(paneName);\n            pane?.remove?.();\n            // @ts-ignore map internals\n            if (context.map._panes != null) {\n                // @ts-ignore map internals\n                context.map._panes = omitPane(context.map._panes, paneName);\n                // @ts-ignore map internals\n                context.map._paneRenderers = omitPane(// @ts-ignore map internals\n                context.map._paneRenderers, paneName);\n            }\n        };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    return props.children != null && paneElement != null ? /*#__PURE__*/ createPortal(/*#__PURE__*/ React.createElement(LeafletProvider, {\n        value: newContext\n    }, props.children), paneElement) : null;\n}\nexport const Pane = /*#__PURE__*/ forwardRef(PaneComponent);\n","import { createElementObject, createOverlayComponent } from '@react-leaflet/core';\nimport { Tooltip as LeafletTooltip } from 'leaflet';\nimport { useEffect } from 'react';\nexport const Tooltip = createOverlayComponent(function createTooltip(props, context) {\n    const tooltip = new LeafletTooltip(props, context.overlayContainer);\n    return createElementObject(tooltip, context);\n}, function useTooltipLifecycle(element, context, { position  }, setOpen) {\n    useEffect(function addTooltip() {\n        const container = context.overlayContainer;\n        if (container == null) {\n            return;\n        }\n        const { instance  } = element;\n        const onTooltipOpen = (event)=>{\n            if (event.tooltip === instance) {\n                if (position != null) {\n                    instance.setLatLng(position);\n                }\n                instance.update();\n                setOpen(true);\n            }\n        };\n        const onTooltipClose = (event)=>{\n            if (event.tooltip === instance) {\n                setOpen(false);\n            }\n        };\n        container.on({\n            tooltipopen: onTooltipOpen,\n            tooltipclose: onTooltipClose\n        });\n        container.bindTooltip(instance);\n        return function removeTooltip() {\n            container.off({\n                tooltipopen: onTooltipOpen,\n                tooltipclose: onTooltipClose\n            });\n            // @ts-ignore protected property\n            if (container._map != null) {\n                container.unbindTooltip();\n            }\n        };\n    }, [\n        element,\n        context,\n        setOpen,\n        position\n    ]);\n});\n"],"names":["Legend","_ref","baseLayers","_jsx","_Fragment","children","length","_jsxs","className","includes","color","label","map","item","style","backgroundColor","_useState","useState","lat","lng","_useState2","_slicedToArray","mousePosition","setMousePosition","mapContainerRef","useRef","HandleMouseHover","useMapEvents","mousemove","e","latlng","_useState3","_useState4","setBaseLayers","_useState5","_useState6","singlebaseLayer","setSingleBaseLayer","ref","MapContainer","center","fullscreenControl","zoom","setInitialMapZoom","setWindowWidth","attributionControl","scrollWheelZoom","zoomDelta","zoomSnap","minZoom","keyboard","dragging","setDragging","doubleClickZoom","maxZoom","ScaleControl","Pane","name","zIndex","GeoJSON","data","indiastates","fillColor","fillOpacity","weight","interactive","LayerControlBtn","layersItems","value","singleLayerItems","EarthquakeZones","feature","ZONE","properties","opacity","dashArray","indiaDistrict","onEachFeature","layer","on","District","popupContent","concat","STATE","bindTooltip","sticky","openTooltip","closeTooltip","EarthquakeFaults","FeatureGroup","MajorEarthquakes","station","index","radius","MAGNITUDE","Circle","geometry","coordinates","Tooltip","DATE","LOCATION","EarthquakeStations","STATION","CODE","STATE_UT","ExportMapButton","mapTitle","toFixed","createPathComponent","ctx","options","_objectWithoutProperties","_excluded","circle","LeafletCircle","createElementObject","extendContext","overlayContainer","props","prevProps","setLatLng","setRadius","group","LeafletFeatureGroup","layerContainer","splitClassName","split","filter","Boolean","addClassName","element","forEach","cls","DomUtil","addClass","DEFAULT_PANES","omitPane","obj","pane","_toPropertyKey","PaneComponent","forwardedRef","paneName","paneElement","setPaneElement","useImperativeHandle","context","useLeafletContext","newContext","useMemo","_objectSpread","useEffect","_props$pane","indexOf","Error","getPane","parentPaneName","parentPane","undefined","createPane","Object","keys","key","_pane$remove","remove","call","_panes","_paneRenderers","createPortal","React","LeafletProvider","forwardRef","createOverlayComponent","tooltip","LeafletTooltip","setOpen","position","container","instance","onTooltipOpen","event","update","onTooltipClose","tooltipopen","tooltipclose","off","_map","unbindTooltip"],"sourceRoot":""}