{"version":3,"file":"static/js/527.e4f46d77.chunk.js","mappings":"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","sources":["maps/FloodMap.jsx"],"sourcesContent":["import React, { useRef, useState } from \"react\";\nimport indiastates from '../data/indiaStates.json';\nimport { setWindowWidth } from \"../utilities/Functions\";\nimport { setInitialMapZoom } from \"../utilities/Functions\";\nimport { setDragging } from \"../utilities/Functions\";\nimport {\n    MapContainer,\n    useMapEvents,\n    GeoJSON,\n    ScaleControl\n} from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport 'leaflet-fullscreen/dist/Leaflet.fullscreen.js';\nimport 'leaflet-fullscreen/dist/leaflet.fullscreen.css';\nimport Monsoon_Rain from \"../data/Monsoon_Rain.json\"\nimport Monsoon_Track_Onset_of_monsoon from \"../data/Monsoon_Track_Onset_of_monsoon.json\"\nimport Monsoon_Track_Retreat_of_monsoon from \"../data/Monsoon_Track_Retreat_of_monsoon.json\"\n// import Monsoon_Track from \"../data/Monsoon_Track.json\"\nimport Rivers from \"../data/Rivers.json\"\nimport indiaBasin from \"../data/indiaBasin.json\"\nimport indiaDistrict from \"../data/indiaDistrict.json\"\nimport Flood_Prone_Area from \"../data/Flood_Prone_Area.json\"\nimport ExportMapButton from \"../components/ExportMapButton\";\nimport LayerControlBtn from \"../components/LayerControlBtn\";\nimport { Link } from \"react-router-dom\";\n\n\nconst Legend = ({ baseLayers }) => {\n    const Monsoon_RainLegend = [\n        { color: \"red\", label: \"> 2500\" },\n        { color: \"purple\", label: \"2000-2500\" },\n        { color: \"blue\", label: \"1500-2000\" },\n        { color: \"green\", label: \"1000-1500\" },\n        { color: \"orange\", label: \"500-1000\" },\n        { color: \"yellow\", label: \"< 500\" },\n\n    ];\n\n    const RiversLegend = [\n        { color: \"blue\", label: \"Rivers\" },\n    ];\n    const Flood_Prone_AreaLegend = [\n        { color: \"purple\", label: \"Flood Prone Area\" },\n    ];\n\n    const Monsoon_Track_Retreat_of_monsoonLegend = [\n        { color: \"brown\", label: \"Monsoon Track (Retreat of monsoon)\" },\n    ];\n    const Monsoon_Track_Onset_of_monsoonLegend = [\n        { color: \"black\", label: \"Monsoon Track (Onset of monsoon)\" },\n    ];\n    const indiaBasinLegend = [\n        { color: \"darkblue\", label: \"India Basin\" },\n    ];\n\n    return (\n        <>\n            {baseLayers.length > 0 && (\n                <div className=\"legend_container\">\n                    <h5>Legends</h5>\n                    {baseLayers.includes(\"Monsoon_Rain\") && (\n                        <div>\n                            <p>Monsoon Annual Rainfall (mm)</p>\n                            {Monsoon_RainLegend.map((item) => (\n                                <div key={item.color} className=\"legend_item\">\n                                    <span\n                                        className=\"legend_item_square\"\n                                        style={{ backgroundColor: item.color }}\n                                    />\n                                    <span className=\"legend-label\">{item.label}</span>\n                                </div>\n                            ))}\n                        </div>\n                    )}\n                    {baseLayers.includes(\"Monsoon_Track_Retreat_of_monsoon\") && (\n                        <div>\n                            {Monsoon_Track_Retreat_of_monsoonLegend.map((item) => (\n                                <div key={item.color} className=\"legend_item\">\n                                    <span\n                                        className=\"legend_item_square\"\n                                        style={{ backgroundColor: item.color }}\n                                    />\n                                    <span className=\"legend-label\">{item.label}</span>\n                                </div>\n                            ))}\n                        </div>\n                    )}\n                    {baseLayers.includes(\"Monsoon_Track_Onset_of_monsoon\") && (\n                        <div>\n                            {Monsoon_Track_Onset_of_monsoonLegend.map((item) => (\n                                <div key={item.color} className=\"legend_item\">\n                                    <span\n                                        className=\"legend_item_square\"\n                                        style={{ backgroundColor: item.color }}\n                                    />\n                                    <span className=\"legend-label\">{item.label}</span>\n                                </div>\n                            ))}\n                        </div>\n                    )}\n\n                    {baseLayers.includes(\"Rivers\") && (\n                        <div>\n                            {RiversLegend.map((item) => (\n                                <div key={item.color} className=\"legend_item\">\n                                    <span\n                                        className=\"legend_item_square\"\n                                        style={{ backgroundColor: item.color }}\n                                    />\n                                    <span className=\"legend-label\">{item.label}</span>\n                                </div>\n                            ))}\n                        </div>\n                    )}\n                    {baseLayers.includes(\"indiaBasin\") && (\n                        <div>\n                            {indiaBasinLegend.map((item) => (\n                                <div key={item.color} className=\"legend_item\">\n                                    <span\n                                        className=\"legend_item_square\"\n                                        style={{ backgroundColor: item.color }}\n                                    />\n                                    <span className=\"legend-label\">{item.label}</span>\n                                </div>\n                            ))}\n                        </div>\n                    )}\n                    {baseLayers.includes(\"Flood_Prone_Area\") && (\n                        <div>\n                            {Flood_Prone_AreaLegend.map((item) => (\n                                <div key={item.color} className=\"legend_item\">\n                                    <span\n                                        className=\"legend_item_square\"\n                                        style={{ backgroundColor: item.color }}\n                                    />\n                                    <span className=\"legend-label\">{item.label}</span>\n                                </div>\n                            ))}\n                        </div>\n                    )}\n\n                </div>\n            )}\n        </>\n    );\n};\n\n\nconst FloodMap = () => {\n    const [mousePosition, setMousePosition] = useState({ lat: 0, lng: 0 });\n    const mapContainerRef = useRef(null);\n\n    const HandleMouseHover = () => {\n        useMapEvents({\n            mousemove: (e) => {\n                setMousePosition(e.latlng);\n            },\n        });\n\n        return null;\n    };\n\n\n\n\n    const MonsoonRainDensity = (density => {\n        return density > 2500\n            ? 'red'\n            : density > 2000\n                ? 'purple'\n                : density > 1500\n                    ? 'blue'\n                    : density > 1000\n                        ? 'green'\n                        : density > 500\n                            ? 'orange'\n                            : 'yellow';\n    })\n    const MonsoonRainStyle = (feature => {\n        return ({\n            fillColor: MonsoonRainDensity(feature.properties.Annual),\n            weight: 1,\n            opacity: 1,\n            color: 'black',\n            dashArray: '2',\n            fillOpacity: 0.5\n        });\n    });\n\n\n    const [baseLayers, setBaseLayers] = useState([\"Monsoon_Rain\", \"Flood_Prone_Area\", \"Rivers\",]);\n\n    function onEachFeatureMonsoonRain(feature, layer) {\n        layer.on(\"mouseover\", function (e) {\n            if (feature.properties && feature.properties.Name) {\n                const popupContent = `\n          <div>\n            STATE: ${feature.properties.Name}<br/>\n            Winter: ${feature.properties.Winter}<br/>\n            Pre_Monsoo: ${feature.properties.Pre_Monsoo}<br/>\n            SW__Monsoo: ${feature.properties.SW__Monsoo}<br/>\n            Post_Monso: ${feature.properties.Post_Monso}<br/>\n            Annual: ${feature.properties.Annual}<br/>\n          </div>\n        `;\n                layer.bindTooltip(popupContent, { sticky: true });\n            }\n            layer.openTooltip();\n        });\n\n        layer.on(\"mouseout\", function () {\n            layer.closeTooltip();\n        });\n    }\n    function onEachFeatureDistricts(feature, layer) {\n        layer.on(\"mouseover\", function (e) {\n            if (feature.properties && feature.properties.District) {\n                const popupContent = `\n          <div>\n          State: ${feature.properties.STATE}<br/>\n          District: ${feature.properties.District}<br/>\n          </div>\n        `;\n                layer.bindTooltip(popupContent, { sticky: true });\n            }\n            layer.openTooltip();\n        });\n\n        layer.on(\"mouseout\", function () {\n            layer.closeTooltip();\n        });\n    }\n\n    function onEachFeatureRivers(feature, layer) {\n        layer.on(\"mouseover\", function (e) {\n            if (feature.properties && feature.properties.rivname) {\n                const popupContent = `\n          <div>\n          River Name: ${feature.properties.rivname}<br/>\n          Origin: ${feature.properties.origin}<br/>\n          Major Trib: ${feature.properties.major_trib}<br/>\n          ba_name: ${feature.properties.ba_name}<br/>\n          Sub Basin: ${feature.properties.sub_basin}<br/>\n          Shape Length: ${feature.properties.shape_Leng}<br/>\n          </div>\n        `;\n                layer.bindTooltip(popupContent, { sticky: true });\n            }\n            layer.openTooltip();\n        });\n\n        layer.on(\"mouseout\", function () {\n            layer.closeTooltip();\n        });\n\n        if (feature.properties && feature.properties.rivname) {\n            if (feature.properties.shape_Leng > 200000) {\n                const popupContent = `\n            <div>\n            ${feature.properties.rivname}\n            </div>\n          `;\n                layer.bindTooltip(popupContent, {\n                    permanent: true,\n                    direction: \"center\",\n                    offset: [0, 0],\n                    className: \"custom-tooltip\", // Assign a custom class name\n                });\n\n            }\n\n        }\n    }\n\n\n\n\n    // function onEachFeatureRivers(feature, layer) {\n    //     if (feature.properties && feature.properties.rivname) {\n    //       const popupContent = `\n    //         <div>\n    //           rivname: ${feature.properties.rivname}<br/>\n    //         </div>\n    //       `;\n    //       layer.bindTooltip(popupContent, { permanent: true });\n    //     }\n    //   }\n\n\n    const layersItems = [\n        { value: \"Monsoon_Rain\", label: \"Monsoon Rain\" },\n        { value: \"Flood_Prone_Area\", label: \"Flood Prone Area\" },\n        // { value: \"Monsoon_Track\", label: \"Monsoon Track\" },\n        { value: \"Rivers\", label: \"Rivers\" },\n        { value: \"indiaBasin\", label: \"River Basin Boundary\" },\n        { value: \"indiaDistrict\", label: \"India Districts\" },\n        { value: \"Monsoon_Track_Onset_of_monsoon\", label: \"Monsoon Track (Onset of monsoon)\" },\n        { value: \"Monsoon_Track_Retreat_of_monsoon\", label: \"Monsoon Track (Retreat of monsoon)\" },\n\n\n    ];\n\n    const [singlebaseLayer, setSingleBaseLayer] = useState(\"\");\n    const singleLayerItems = [\n\n\n\n    ];\n\n\n\n\n\n    return (\n        <div className=\"main_page_container\">\n            <div className=\"row\">\n                <div className=\"col-lg-3 col-md-12\">\n                    <div className=\"info_container\">\n                        <h3>Flood</h3>\n                        <p>\n                        Floods are natural disasters that occur when an area experiences an overflow of water onto normally dry land. They can be caused by various factors, including heavy rainfall, rapid snowmelt, dam, coastal storm surges, and tsunamis. Floods can have devastating effects on communities and the environment, causing widespread damage to property, infrastructure, and even loss of life.\n                        </p>\n                        <Link to=\"/flood/flood-details\"> <button className=\"general_button\">Read More</button></Link>\n                        <Link to=\"/flood/quiz\"> <button className=\"general_button\">Quiz</button></Link>\n\n                    </div>\n\n                </div>\n\n                <div className=\"col-lg-9 col-md-12\">\n                    <div className=\"map_container\" ref={mapContainerRef}>\n                        <MapContainer\n                            center={[22, 84]}\n                            fullscreenControl={true}\n                            zoom={setInitialMapZoom()}\n                            style={setWindowWidth()}\n                            attributionControl={false}\n                            scrollWheelZoom={false}\n                            zoomDelta={0.25}\n                            zoomSnap={0}\n                            minZoom={3}\n                            keyboard={false}\n                            dragging={setDragging()}\n                            // touchZoom={false}\n                            doubleClickZoom={false}\n                            maxZoom={9}\n                        >\n                            <HandleMouseHover />\n                            <GeoJSON\n                                data={indiastates.features}\n                                style={{\n                                    fillColor: \"#84857e\",\n                                    fillOpacity: 0.5,\n                                    weight: 2,\n                                    color: \"whitesmoke\",\n                                    interactive: false,\n                                }}\n                            />\n\n                            <ScaleControl />\n                            <LayerControlBtn setBaseLayers={setBaseLayers} baseLayers={baseLayers} layersItems={layersItems} singlebaseLayer={singlebaseLayer} setSingleBaseLayer={setSingleBaseLayer} singleLayerItems={singleLayerItems} />\n\n\n\n                            {baseLayers.includes(\"Monsoon_Rain\") && (\n                                <GeoJSON\n                                    data={Monsoon_Rain.features}\n                                    style={MonsoonRainStyle}\n                                    onEachFeature={onEachFeatureMonsoonRain}\n                                />\n                            )}\n                            {baseLayers.includes(\"Flood_Prone_Area\") && (\n                                <GeoJSON\n                                    data={Flood_Prone_Area.features}\n                                    style={{\n                                        fillColor: \"purple\",\n                                        weight: 1,\n                                        color: \"purple\",\n                                        interactive: false,\n                                        fillOpacity: 1\n                                    }}\n                                />\n                            )}\n\n                            {baseLayers.includes(\"Monsoon_Track_Onset_of_monsoon\") && (\n                                <GeoJSON\n                                    data={Monsoon_Track_Onset_of_monsoon.features}\n                                    style={{\n                                        weight: 3,\n                                        color: \"brown\",\n                                        interactive: false,\n                                    }}\n                                />\n                            )}\n                            {baseLayers.includes(\"Monsoon_Track_Retreat_of_monsoon\") && (\n                                <GeoJSON\n                                    data={Monsoon_Track_Retreat_of_monsoon.features}\n                                    style={{\n                                        weight: 3,\n                                        color: \"black\",\n                                        interactive: false,\n                                    }}\n                                />\n                            )}\n\n                            {baseLayers.includes(\"Rivers\") && (\n                                <GeoJSON\n                                    data={Rivers.features}\n                                    style={{\n                                        fillColor: \"none\",\n                                        weight: 2,\n                                        color: \"blue\",\n                                        // interactive: false,\n                                    }}\n                                    onEachFeature={onEachFeatureRivers}\n                                />\n                            )}\n\n                            {baseLayers.includes(\"indiaDistrict\") && (\n                                <GeoJSON\n                                    data={indiaDistrict.features}\n                                    style={{\n                                        fillColor: \"black\",\n                                        weight: 1,\n                                        opacity: 1,\n                                        color: 'black',\n                                        dashArray: '2',\n                                        fillOpacity: 0.0000000001\n                                    }}\n                                    onEachFeature={onEachFeatureDistricts}\n                                />\n                            )}\n\n                            {baseLayers.includes(\"indiaBasin\") && (\n                                <GeoJSON\n                                    data={indiaBasin.features}\n                                    style={{\n                                        fillColor: \"none\",\n                                        weight: 2,\n                                        color: \"darkblue\",\n                                        interactive: false,\n                                    }}\n                                />\n                            )}\n\n\n\n\n\n                            <div\n                                style={{\n                                    position: \"absolute\",\n                                    bottom: 10,\n                                    right: 10,\n                                    backgroundColor: \"white\",\n                                    padding: 5,\n                                }}\n                            >\n                                Lat: {mousePosition.lat.toFixed(4)}, Long:{\" \"}\n                                {mousePosition.lng.toFixed(4)}\n                            </div>\n                            <div className=\"desktop_legend_container\">\n                                {baseLayers && <Legend baseLayers={baseLayers} />}\n                            </div>\n\n                            <ExportMapButton mapContainerRef={mapContainerRef} mapTitle=\"Natural Disaster: Flood\" />\n                        </MapContainer>\n                        <div className=\"phone_legend_container\">\n                            {baseLayers && <Legend baseLayers={baseLayers} />}\n                        </div>\n                    </div>\n\n\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default FloodMap"],"names":["Legend","_ref","baseLayers","_jsx","_Fragment","children","length","_jsxs","className","includes","color","label","map","item","style","backgroundColor","_useState","useState","lat","lng","_useState2","_slicedToArray","mousePosition","setMousePosition","mapContainerRef","useRef","HandleMouseHover","useMapEvents","mousemove","e","latlng","_useState3","_useState4","setBaseLayers","_useState5","_useState6","singlebaseLayer","setSingleBaseLayer","Link","to","ref","MapContainer","center","fullscreenControl","zoom","setInitialMapZoom","setWindowWidth","attributionControl","scrollWheelZoom","zoomDelta","zoomSnap","minZoom","keyboard","dragging","setDragging","doubleClickZoom","maxZoom","GeoJSON","data","indiastates","fillColor","fillOpacity","weight","interactive","ScaleControl","LayerControlBtn","layersItems","value","singleLayerItems","Monsoon_Rain","feature","density","properties","Annual","opacity","dashArray","onEachFeature","layer","on","Name","popupContent","concat","Winter","Pre_Monsoo","SW__Monsoo","Post_Monso","bindTooltip","sticky","openTooltip","closeTooltip","Flood_Prone_Area","Monsoon_Track_Onset_of_monsoon","Monsoon_Track_Retreat_of_monsoon","Rivers","rivname","origin","major_trib","ba_name","sub_basin","shape_Leng","permanent","direction","offset","indiaDistrict","District","STATE","indiaBasin","position","bottom","right","padding","toFixed","ExportMapButton","mapTitle"],"sourceRoot":""}