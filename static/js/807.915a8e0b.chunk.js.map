{"version":3,"file":"static/js/807.915a8e0b.chunk.js","mappings":"ks+oHAqBMA,EAAS,SAAHC,GAAwB,IAAlBC,EAAUD,EAAVC,WAahB,OACEC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACGH,EAAWI,OAAS,IACnBC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBH,SAAA,EAC/BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,YACHH,EAAWO,SAAS,sBACnBN,EAAAA,EAAAA,KAAA,OAAAE,SAlBqB,CAC7B,CAAEK,MAAO,SAAUC,MAAO,uBAkBQC,KAAI,SAACC,GAAI,OAC/BN,EAAAA,EAAAA,MAAA,OAAsBC,UAAU,cAAaH,SAAA,EAC3CF,EAAAA,EAAAA,KAAA,QACEK,UAAU,qBACVM,MAAO,CAAEC,gBAAiBF,EAAKH,UAEjCP,EAAAA,EAAAA,KAAA,QAAMK,UAAU,eAAcH,SAAEQ,EAAKF,UAL7BE,EAAKH,MAMT,MAIXR,EAAWO,SAAS,YACnBN,EAAAA,EAAAA,KAAA,OAAAE,SA3BW,CACnB,CAAEK,MAAO,OAAQC,MAAO,WA2BAC,KAAI,SAACC,GAAI,OACrBN,EAAAA,EAAAA,MAAA,OAAsBC,UAAU,cAAaH,SAAA,EAC3CF,EAAAA,EAAAA,KAAA,QACEK,UAAU,qBACVM,MAAO,CAAEC,gBAAiBF,EAAKH,UAEjCP,EAAAA,EAAAA,KAAA,QAAMK,UAAU,eAAcH,SAAEQ,EAAKF,UAL7BE,EAAKH,MAMT,MAIXR,EAAWO,SAAS,gBACnBN,EAAAA,EAAAA,KAAA,OAAAE,SApCe,CACvB,CAAEK,MAAO,WAAYC,MAAO,gBAoCAC,KAAI,SAACC,GAAI,OACzBN,EAAAA,EAAAA,MAAA,OAAsBC,UAAU,cAAaH,SAAA,EAC3CF,EAAAA,EAAAA,KAAA,QACEK,UAAU,qBACVM,MAAO,CAAEC,gBAAiBF,EAAKH,UAEjCP,EAAAA,EAAAA,KAAA,QAAMK,UAAU,eAAcH,SAAEQ,EAAKF,UAL7BE,EAAKH,MAMT,UAQtB,EAiMA,EA7LmB,WACjB,IAAAM,GAA0CC,EAAAA,EAAAA,UAAS,CAAEC,IAAK,EAAGC,IAAK,IAAIC,GAAAC,EAAAA,EAAAA,GAAAL,EAAA,GAA/DM,EAAaF,EAAA,GAAEG,EAAgBH,EAAA,GAChCI,GAAkBC,EAAAA,EAAAA,QAAO,MACzBC,EAAmB,WAOvB,OANAC,EAAAA,EAAAA,IAAa,CACXC,UAAW,SAACC,GACVN,EAAiBM,EAAEC,OACrB,IAGK,IACT,EAkDA,IAAAC,GAAoCd,EAAAA,EAAAA,UAAS,CAAC,mBAAoB,WAAUe,GAAAX,EAAAA,EAAAA,GAAAU,EAAA,GAArE7B,EAAU8B,EAAA,GAAEC,EAAaD,EAAA,GAQhCE,GAA8CjB,EAAAA,EAAAA,UAAS,IAAGkB,GAAAd,EAAAA,EAAAA,GAAAa,EAAA,GAAnDE,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,GAQ1C,OACEhC,EAAAA,EAAAA,KAAA,OAAKK,UAAU,sBAAqBH,UAClCE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,MAAKH,SAAA,EAClBF,EAAAA,EAAAA,KAAA,OAAKK,UAAU,WAAUH,UACvBE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBH,SAAA,EAC7BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,aACJF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,gpBAQPF,EAAAA,EAAAA,KAAA,OAAKK,UAAU,WAAUH,UACvBE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAgB8B,IAAKd,EAAgBnB,SAAA,EAClDE,EAAAA,EAAAA,MAACgC,EAAAA,EAAY,CACXC,OAAQ,CAAC,GAAI,IACbC,mBAAmB,EACnBC,MAAMC,EAAAA,EAAAA,MACNC,SAASD,EAAAA,EAAAA,MACT7B,OAAO+B,EAAAA,EAAAA,MACPC,oBAAoB,EACpBC,iBAAiB,EACjBC,UAAW,GACXC,SAAU,EAEVC,UAAU,EACVC,UAAUC,EAAAA,EAAAA,MAEVC,iBAAiB,EACjBC,QAAS,EAAEjD,SAAA,EAEXF,EAAAA,EAAAA,KAACuB,EAAgB,KAEjBvB,EAAAA,EAAAA,KAACoD,EAAAA,EAAY,KAEbpD,EAAAA,EAAAA,KAACqD,EAAAA,EAAI,CAACC,KAAK,mBAAmB3C,MAAO,CAAE4C,QAAS,GAAIrD,UAClDF,EAAAA,EAAAA,KAACwD,EAAAA,EAAO,CACNC,KAAMC,EAAAA,EACN/C,MAAO,CACLgD,UAAW,UACXC,YAAa,GACbC,OAAQ,EACRtD,MAAO,aACPuD,aAAa,QAKnB9D,EAAAA,EAAAA,KAAC+D,EAAAA,EAAe,CAACjC,cAAeA,EAAe/B,WAAYA,EAAYiE,YAhE/D,CAClB,CAAEC,MAAO,mBAAoBzD,MAAO,sBACpC,CAAEyD,MAAO,SAAUzD,MAAO,UAC1B,CAAEyD,MAAO,aAAczD,MAAO,yBA6D6EyB,gBAAiBA,EAAiBC,mBAAoBA,EAAoBgC,iBAzD9J,MA2DblE,EAAAA,EAAAA,KAACqD,EAAAA,EAAI,CAACC,KAAK,wBAAwB3C,MAAO,CAAE4C,QAAS,GAAIrD,SACtDH,EAAWO,SAAS,sBACnBN,EAAAA,EAAAA,KAACwD,EAAAA,EAAO,CACNC,KAAMU,EAAAA,EACNxD,MAxHY,SAACyD,GAC7B,MAAmC,QAA/BA,EAAQC,WAAWC,QACb,CACNX,UAAW,SACXE,OAAQ,EACRU,QAAS,EACThE,MAAO,QACPiE,UAAW,IACXZ,YAAa,IAGP,CACND,UAAW,QACXE,OAAQ,EACRU,QAAS,EACThE,MAAO,QACPiE,UAAW,IACXZ,YAAa,GAKnB,EAmGkBa,cA9FlB,SAA+BL,EAASM,GACtCA,EAAMC,GAAG,aAAa,SAAUjD,GAC9B,GAAI0C,EAAQC,YAAcD,EAAQC,WAAWO,SAAU,CACrD,IAAMC,EAAY,oCAAAC,OAENV,EAAQC,WAAWO,SAAQ,0BAAAE,OAC9BV,EAAQC,WAAWU,MAAK,wBAGjCL,EAAMM,YAAYH,EAAc,CAAEI,QAAQ,GAC5C,CACAP,EAAMQ,aACR,IAEAR,EAAMC,GAAG,YAAY,WACnBD,EAAMS,cACR,GACF,MAmFapF,EAAWO,SAAS,YACnBN,EAAAA,EAAAA,KAACwD,EAAAA,EAAO,CACNC,KAAM2B,EAAAA,EACNzE,MAAO,CACLgD,UAAW,OACXE,OAAQ,EACRtD,MAAO,OACPuD,aAAa,KAIlB/D,EAAWO,SAAS,gBACnBN,EAAAA,EAAAA,KAACwD,EAAAA,EAAO,CACNC,KAAM4B,EAAAA,GACN1E,MAAO,CACLgD,UAAW,OACXE,OAAQ,EACRtD,MAAO,WACPuD,aAAa,MAOnB1D,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uBAAsBH,SAAA,CAAC,QAC9BiB,EAAcJ,IAAIuE,QAAQ,GAAG,UAAQ,IAC1CnE,EAAcH,IAAIsE,QAAQ,OAE7BtF,EAAAA,EAAAA,KAAA,OAAKK,UAAU,2BAA0BH,SACtCH,IAAcC,EAAAA,EAAAA,KAACH,EAAM,CAACE,WAAYA,OAErCC,EAAAA,EAAAA,KAACuF,EAAAA,EAAe,CAAClE,gBAAiBA,EAAiBmE,SAAS,kCAE9DxF,EAAAA,EAAAA,KAAA,OAAKK,UAAU,yBAAwBH,SACpCH,IAAcC,EAAAA,EAAAA,KAACH,EAAM,CAACE,WAAYA,eAYjD,C,6GChRA,SAAS0F,EAAepF,GACpB,OAAOA,EAAUqF,MAAM,KAAKC,OAAOC,QACvC,CACO,SAASC,EAAaC,EAASzF,GAClCoF,EAAepF,GAAW0F,SAAQ,SAACC,GAC/BC,EAAAA,QAAQC,SAASJ,EAASE,EAC9B,GACJ,C,iCCLMG,EAAgB,CAClB,UACA,aACA,cACA,YACA,aACA,WACA,eAEJ,SAASC,EAASC,EAAKC,GACgBD,EAA1BC,GACT,OAD8BC,EAAAA,EAAAA,GAAKF,EAAG,CAA7BC,GAAI7F,IAAA+F,EAAAA,GAEjB,CAsBA,SAASC,EAAcC,EAAOC,GAC1B,IAAA9F,GAAmBC,EAAAA,EAAAA,UAAS4F,EAAMpD,MAA3BsD,GAAgC1F,EAAAA,EAAAA,GAAAL,EAAA,GAAxB,GACfe,GAAsCd,EAAAA,EAAAA,UAAS,MAAKe,GAAAX,EAAAA,EAAAA,GAAAU,EAAA,GAA7CiF,EAAWhF,EAAA,GAAEiF,EAAcjF,EAAA,IAClCkF,EAAAA,EAAAA,qBAAoBJ,GAAc,kBAAIE,CAAW,GAAE,CAC/CA,IAEJ,IAAMG,GAAUC,EAAAA,EAAAA,MAEVC,GAAaC,EAAAA,EAAAA,UAAQ,kBAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAD,EAChBJ,GAAO,IACVV,KAAMM,GAAQ,GACd,CACJI,IAkBJ,OAhBAK,EAAAA,EAAAA,YAAU,WAEN,OADAP,EApCR,SAAoBxD,EAAMoD,EAAOM,GAAS,IAAAM,EACtC,IAAqC,IAAjCnB,EAAcoB,QAAQjE,GACtB,MAAM,IAAIkE,MAAM,6EAAD1C,OAA8ExB,IAEjG,GAAiC,MAA7B0D,EAAQvG,IAAIgH,QAAQnE,GACpB,MAAM,IAAIkE,MAAM,yCAAD1C,OAA0CxB,IAE7D,IAAMoE,EAA2B,QAAbJ,EAAGZ,EAAMJ,YAAI,IAAAgB,EAAAA,EAAIN,EAAQV,KACvCqB,EAAaD,EAAiBV,EAAQvG,IAAIgH,QAAQC,QAAkBE,EACpE9B,EAAUkB,EAAQvG,IAAIoH,WAAWvE,EAAMqE,GAU7C,OATuB,MAAnBjB,EAAMrG,WACNwF,EAAaC,EAASY,EAAMrG,WAEb,MAAfqG,EAAM/F,OACNmH,OAAOC,KAAKrB,EAAM/F,OAAOoF,SAAQ,SAACiC,GAE9BlC,EAAQnF,MAAMqH,GAAOtB,EAAM/F,MAAMqH,EACrC,IAEGlC,CACX,CAgBuB+B,CAAWjB,EAAUF,EAAOM,IACpC,WAA6B,IAAAiB,EAC1B3B,EAAOU,EAAQvG,IAAIgH,QAAQb,GAC7B,OAAJN,QAAI,IAAJA,GAAY,QAAR2B,EAAJ3B,EAAM4B,cAAM,IAAAD,GAAZA,EAAAE,KAAA7B,GAE0B,MAAtBU,EAAQvG,IAAI2H,SAEZpB,EAAQvG,IAAI2H,OAAShC,EAASY,EAAQvG,IAAI2H,OAAQxB,GAElDI,EAAQvG,IAAI4H,eAAiBjC,EAC7BY,EAAQvG,IAAI4H,eAAgBzB,GAEpC,CAEJ,GAAG,IACsB,MAAlBF,EAAMxG,UAAmC,MAAf2G,GAAoCyB,EAAAA,EAAAA,cAA2BC,EAAAA,cAAoBC,EAAAA,GAAiB,CACjIvE,MAAOiD,GACRR,EAAMxG,UAAW2G,GAAe,IACvC,CACO,IAAMxD,GAAqBoF,EAAAA,EAAAA,YAAWhC,E","sources":["maps/DroughtMap.jsx","../node_modules/@react-leaflet/core/lib/dom.js","../node_modules/react-leaflet/lib/Pane.js"],"sourcesContent":["import React, { useRef, useState } from \"react\";\nimport indiastates from '../data/indiaStates.json';\nimport indiaBasin from '../data/indiaBasin.json';\nimport Rivers from '../data/Rivers.json';\nimport DroughtProneArea from '../data/DroughtProneArea.json';\nimport { setWindowWidth } from \"../utilities/Functions\";\nimport { setInitialMapZoom } from \"../utilities/Functions\";\nimport { setDragging } from \"../utilities/Functions\";\nimport {\n  MapContainer,\n  useMapEvents,\n  GeoJSON,\n  ScaleControl, Pane\n} from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport 'leaflet-fullscreen/dist/Leaflet.fullscreen.js';\nimport 'leaflet-fullscreen/dist/leaflet.fullscreen.css';\nimport ExportMapButton from \"../components/ExportMapButton\";\nimport LayerControlBtn from \"../components/LayerControlBtn\";\n\n\nconst Legend = ({ baseLayers }) => {\n  const DroughtProneAreaLegend = [\n    { color: \"orange\", label: \"Drought Prone Area\" },\n  ];\n\n  const RiversLegend = [\n    { color: \"blue\", label: \"Rivers\" },\n  ];\n\n  const indiaBasinLegend = [\n    { color: \"darkblue\", label: \"India Basin\" },\n  ];\n\n  return (\n    <>\n      {baseLayers.length > 0 && (\n        <div className=\"legend_container\">\n          <h5>Legends</h5>\n          {baseLayers.includes(\"DroughtProneArea\") && (\n            <div>\n              {DroughtProneAreaLegend.map((item) => (\n                <div key={item.color} className=\"legend_item\">\n                  <span\n                    className=\"legend_item_square\"\n                    style={{ backgroundColor: item.color }}\n                  />\n                  <span className=\"legend-label\">{item.label}</span>\n                </div>\n              ))}\n            </div>\n          )}\n          {baseLayers.includes(\"Rivers\") && (\n            <div>\n              {RiversLegend.map((item) => (\n                <div key={item.color} className=\"legend_item\">\n                  <span\n                    className=\"legend_item_square\"\n                    style={{ backgroundColor: item.color }}\n                  />\n                  <span className=\"legend-label\">{item.label}</span>\n                </div>\n              ))}\n            </div>\n          )}\n          {baseLayers.includes(\"indiaBasin\") && (\n            <div>\n              {indiaBasinLegend.map((item) => (\n                <div key={item.color} className=\"legend_item\">\n                  <span\n                    className=\"legend_item_square\"\n                    style={{ backgroundColor: item.color }}\n                  />\n                  <span className=\"legend-label\">{item.label}</span>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\n\n\nconst DroughtMap = () => {\n  const [mousePosition, setMousePosition] = useState({ lat: 0, lng: 0 });\n  const mapContainerRef = useRef(null);\n  const HandleMouseHover = () => {\n    useMapEvents({\n      mousemove: (e) => {\n        setMousePosition(e.latlng);\n      },\n    });\n\n    return null;\n  };\n\n  const DroughtProneAreaStyle = (feature) => {\n    if (feature.properties.DROUGHT === \"YES\") {\n      return ({\n        fillColor: 'orange',\n        weight: 1,\n        opacity: 1,\n        color: 'black',\n        dashArray: '2',\n        fillOpacity: 0.7\n      })\n    } else {\n      return ({\n        fillColor: 'white',\n        weight: 1,\n        opacity: 1,\n        color: 'black',\n        dashArray: '2',\n        fillOpacity: 0.9\n      })\n\n    }\n\n  }\n  \n\n\n\n  function onEachFeatureDistrict(feature, layer) {\n    layer.on('mouseover', function (e) {\n      if (feature.properties && feature.properties.District) {\n        const popupContent = `\n      <div>\n        District: ${feature.properties.District}<br/>\n        STATE: ${feature.properties.STATE}\n      </div>\n    `;\n        layer.bindTooltip(popupContent, { sticky: true });\n      }\n      layer.openTooltip();\n    });\n\n    layer.on('mouseout', function () {\n      layer.closeTooltip();\n    });\n  }\n\n\n\n  const [baseLayers, setBaseLayers] = useState([\"DroughtProneArea\", \"Rivers\"]);\n\n  const layersItems = [\n    { value: \"DroughtProneArea\", label: \"Drought Prone Area\" },\n    { value: \"Rivers\", label: \"Rivers\" },\n    { value: \"indiaBasin\", label: \"River Basin Boundary\" },\n  ];\n\n  const [singlebaseLayer, setSingleBaseLayer] = useState(\"\");\n  const singleLayerItems = [\n\n\n\n  ];\n\n\n  return (\n    <div className=\"main_page_container\">\n      <div className=\"row\">\n        <div className=\"col-md-3\">\n          <div className=\"info_container\">\n            <h3>Drought</h3>\n            <p>\n              Drought is a natural disaster that has plagued various regions of India throughout history. It occurs when there is an extended period of abnormally low rainfall, resulting in severe water scarcity. The impact of drought can be devastating, affecting agriculture, livestock, and overall socio-economic conditions. During droughts, crops wither, water sources dry up, and communities face hardships due to limited access to drinking water and food. Efforts to mitigate the effects of drought in India include water conservation measures, watershed management, drought-resistant crop varieties, and providing relief assistance to affected regions.\n            </p>\n\n          </div>\n\n        </div>\n\n        <div className=\"col-md-9\">\n          <div className=\"map_container\" ref={mapContainerRef}>\n            <MapContainer\n              center={[22, 84]}\n              fullscreenControl={true}\n              zoom={setInitialMapZoom()}\n              minZoom={setInitialMapZoom()}\n              style={setWindowWidth()}\n              attributionControl={false}\n              scrollWheelZoom={false}\n              zoomDelta={0.5}\n              zoomSnap={0}\n\n              keyboard={false}\n              dragging={setDragging()}\n              // touchZoom={false}\n              doubleClickZoom={false}\n              maxZoom={9}\n            >\n              <HandleMouseHover />\n\n              <ScaleControl />\n\n              <Pane name=\"indiastates_pane\" style={{ zIndex: -3 }}>\n                <GeoJSON\n                  data={indiastates.features}\n                  style={{\n                    fillColor: \"#84857e\",\n                    fillOpacity: 0.5,\n                    weight: 2,\n                    color: \"whitesmoke\",\n                    interactive: false,\n                  }}\n                />\n              </Pane>\n\n              <LayerControlBtn setBaseLayers={setBaseLayers} baseLayers={baseLayers} layersItems={layersItems} singlebaseLayer={singlebaseLayer} setSingleBaseLayer={setSingleBaseLayer} singleLayerItems={singleLayerItems} />\n\n              <Pane name=\"DroughtProneArea_pane\" style={{ zIndex: -2 }}>\n                {baseLayers.includes(\"DroughtProneArea\") && (\n                  <GeoJSON\n                    data={DroughtProneArea.features}\n                    style={DroughtProneAreaStyle}\n                    onEachFeature={onEachFeatureDistrict}\n\n                  />\n                )}\n              </Pane>\n\n              {baseLayers.includes(\"Rivers\") && (\n                <GeoJSON\n                  data={Rivers.features}\n                  style={{\n                    fillColor: \"none\",\n                    weight: 2,\n                    color: \"blue\",\n                    interactive: false,\n                  }}\n                />\n              )}\n              {baseLayers.includes(\"indiaBasin\") && (\n                <GeoJSON\n                  data={indiaBasin.features}\n                  style={{\n                    fillColor: \"none\",\n                    weight: 2,\n                    color: \"darkblue\",\n                    interactive: false,\n                  }}\n                />\n              )}\n\n\n\n              <div className=\"coordinate_container\">\n                Lat: {mousePosition.lat.toFixed(4)}, Long:{\" \"}\n                {mousePosition.lng.toFixed(4)}\n              </div>\n              <div className=\"desktop_legend_container\">\n                {baseLayers && <Legend baseLayers={baseLayers} />}\n              </div>\n              <ExportMapButton mapContainerRef={mapContainerRef} mapTitle=\"Natural Disaster: Drought\" />\n            </MapContainer>\n            <div className=\"phone_legend_container\">\n              {baseLayers && <Legend baseLayers={baseLayers} />}\n            </div>\n\n          </div>\n\n\n        </div>\n      </div>\n\n\n    </div>\n  );\n};\n\nexport default DroughtMap;\n","import { DomUtil } from 'leaflet';\nfunction splitClassName(className) {\n    return className.split(' ').filter(Boolean);\n}\nexport function addClassName(element, className) {\n    splitClassName(className).forEach((cls)=>{\n        DomUtil.addClass(element, cls);\n    });\n}\nexport function removeClassName(element, className) {\n    splitClassName(className).forEach((cls)=>{\n        DomUtil.removeClass(element, cls);\n    });\n}\nexport function updateClassName(element, prevClassName, nextClassName) {\n    if (element != null && nextClassName !== prevClassName) {\n        if (prevClassName != null && prevClassName.length > 0) {\n            removeClassName(element, prevClassName);\n        }\n        if (nextClassName != null && nextClassName.length > 0) {\n            addClassName(element, nextClassName);\n        }\n    }\n}\n","import { LeafletProvider, addClassName, useLeafletContext } from '@react-leaflet/core';\nimport React, { forwardRef, useState, useEffect, useImperativeHandle, useMemo } from 'react';\nimport { createPortal } from 'react-dom';\nconst DEFAULT_PANES = [\n    'mapPane',\n    'markerPane',\n    'overlayPane',\n    'popupPane',\n    'shadowPane',\n    'tilePane',\n    'tooltipPane'\n];\nfunction omitPane(obj, pane) {\n    const { [pane]: _p , ...others } = obj;\n    return others;\n}\nfunction createPane(name, props, context) {\n    if (DEFAULT_PANES.indexOf(name) !== -1) {\n        throw new Error(`You must use a unique name for a pane that is not a default Leaflet pane: ${name}`);\n    }\n    if (context.map.getPane(name) != null) {\n        throw new Error(`A pane with this name already exists: ${name}`);\n    }\n    const parentPaneName = props.pane ?? context.pane;\n    const parentPane = parentPaneName ? context.map.getPane(parentPaneName) : undefined;\n    const element = context.map.createPane(name, parentPane);\n    if (props.className != null) {\n        addClassName(element, props.className);\n    }\n    if (props.style != null) {\n        Object.keys(props.style).forEach((key)=>{\n            // @ts-ignore\n            element.style[key] = props.style[key];\n        });\n    }\n    return element;\n}\nfunction PaneComponent(props, forwardedRef) {\n    const [paneName] = useState(props.name);\n    const [paneElement, setPaneElement] = useState(null);\n    useImperativeHandle(forwardedRef, ()=>paneElement, [\n        paneElement\n    ]);\n    const context = useLeafletContext();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const newContext = useMemo(()=>({\n            ...context,\n            pane: paneName\n        }), [\n        context\n    ]);\n    useEffect(()=>{\n        setPaneElement(createPane(paneName, props, context));\n        return function removeCreatedPane() {\n            const pane = context.map.getPane(paneName);\n            pane?.remove?.();\n            // @ts-ignore map internals\n            if (context.map._panes != null) {\n                // @ts-ignore map internals\n                context.map._panes = omitPane(context.map._panes, paneName);\n                // @ts-ignore map internals\n                context.map._paneRenderers = omitPane(// @ts-ignore map internals\n                context.map._paneRenderers, paneName);\n            }\n        };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    return props.children != null && paneElement != null ? /*#__PURE__*/ createPortal(/*#__PURE__*/ React.createElement(LeafletProvider, {\n        value: newContext\n    }, props.children), paneElement) : null;\n}\nexport const Pane = /*#__PURE__*/ forwardRef(PaneComponent);\n"],"names":["Legend","_ref","baseLayers","_jsx","_Fragment","children","length","_jsxs","className","includes","color","label","map","item","style","backgroundColor","_useState","useState","lat","lng","_useState2","_slicedToArray","mousePosition","setMousePosition","mapContainerRef","useRef","HandleMouseHover","useMapEvents","mousemove","e","latlng","_useState3","_useState4","setBaseLayers","_useState5","_useState6","singlebaseLayer","setSingleBaseLayer","ref","MapContainer","center","fullscreenControl","zoom","setInitialMapZoom","minZoom","setWindowWidth","attributionControl","scrollWheelZoom","zoomDelta","zoomSnap","keyboard","dragging","setDragging","doubleClickZoom","maxZoom","ScaleControl","Pane","name","zIndex","GeoJSON","data","indiastates","fillColor","fillOpacity","weight","interactive","LayerControlBtn","layersItems","value","singleLayerItems","DroughtProneArea","feature","properties","DROUGHT","opacity","dashArray","onEachFeature","layer","on","District","popupContent","concat","STATE","bindTooltip","sticky","openTooltip","closeTooltip","Rivers","indiaBasin","toFixed","ExportMapButton","mapTitle","splitClassName","split","filter","Boolean","addClassName","element","forEach","cls","DomUtil","addClass","DEFAULT_PANES","omitPane","obj","pane","_objectWithoutProperties","_toPropertyKey","PaneComponent","props","forwardedRef","paneName","paneElement","setPaneElement","useImperativeHandle","context","useLeafletContext","newContext","useMemo","_objectSpread","useEffect","_props$pane","indexOf","Error","getPane","parentPaneName","parentPane","undefined","createPane","Object","keys","key","_pane$remove","remove","call","_panes","_paneRenderers","createPortal","React","LeafletProvider","forwardRef"],"sourceRoot":""}