{"version":3,"file":"static/js/266.786999b5.chunk.js","mappings":"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","sources":["components/ExportMapButton.jsx","components/LayerControlBtn.jsx","maps/EpidemicsMap.jsx","utilities/Functions.jsx","../node_modules/react-leaflet/lib/FeatureGroup.js"],"sourcesContent":["import React from 'react'\nimport jsPDF from 'jspdf';\nimport domtoimage from 'dom-to-image';\nimport { AiFillPrinter } from 'react-icons/ai';\nimport { useAlertContext } from '../context/AlertContext';\n\nconst ExportMapButton = ({ mapContainerRef, mapTitle }) => {\n    const { setAlertMessage, setShowAlert } = useAlertContext();\n    const handleExportMapPDF = () => {\n        const mapContainer = mapContainerRef.current;\n        const viewportWidth = window.innerWidth;\n\n        setAlertMessage('Your download is starting')\n        setShowAlert(true)\n\n\n        const options = {\n            width: mapContainer.offsetWidth * 2,\n            height: mapContainer.offsetHeight * 2,\n            style: {\n                transform: 'scale(2)',\n                transformOrigin: 'top left',\n                width: '100%',\n                height: 'auto',\n            },\n        };\n\n        domtoimage\n            .toBlob(mapContainer, options)\n            .then((blob) => {\n                const reader = new FileReader();\n                reader.onloadend = () => {\n                    const img = new Image();\n                    img.onload = () => {\n                        const aspectRatio = img.width / img.height;\n                        const pdfOrientation = viewportWidth <= 767 ? 'portrait' : 'landscape';\n                        const pdf = new jsPDF(pdfOrientation, 'px', 'a4');\n\n                        // Add title at the top\n                        const title = mapTitle;\n                        const titleFontSize = 16;\n                        const titleTextWidth = pdf.getStringUnitWidth(title) * titleFontSize / pdf.internal.scaleFactor;\n                        const titleTextX = (pdf.internal.pageSize.getWidth() - titleTextWidth) / 2;\n                        const titleTextY = 20; // Y-coordinate for the title\n\n                        pdf.setFontSize(titleFontSize);\n                        pdf.text(titleTextX, titleTextY, title);\n\n\n                        if (viewportWidth <= 767) {\n                            const pdfHeight = pdf.internal.pageSize.getHeight() - 50; // Set the desired height for PDF if viewport width <= 767\n                            const pdfWidth = pdfHeight * aspectRatio;\n                            const x = (pdf.internal.pageSize.getWidth() - pdfWidth) / 2;\n                            const y = (pdf.internal.pageSize.getHeight() - pdfHeight) / 2;\n                            pdf.addImage(img, 'PNG', x, y, pdfWidth, pdfHeight);\n                        } else {\n                            const pdfWidth = pdf.internal.pageSize.getWidth(); // Use A4 width for PDF if viewport width > 767\n                            const pdfHeight = pdfWidth / aspectRatio;\n                            const x = 0;\n                            const y = (pdf.internal.pageSize.getHeight() - pdfHeight) / 2;\n                            pdf.addImage(img, 'PNG', x, y, pdfWidth, pdfHeight);\n                        }\n\n                        // Add text line at the bottom\n                        const websiteName = 'This map has been downloaded from GEOSPATIAL SMART THINKERS';\n                        const fontSize = 10;\n                        const textWidth = pdf.getStringUnitWidth(websiteName) * fontSize / pdf.internal.scaleFactor;\n                        const textX = (pdf.internal.pageSize.getWidth() - textWidth) / 2; // X-coordinate for center alignment\n                        const textY = pdf.internal.pageSize.getHeight() - 10; // Y-coordinate for the text\n\n                        pdf.setFontSize(fontSize);\n                        pdf.text(textX, textY, websiteName);\n\n                        const pdfOptions = {\n                            compress: true, // Enable compression\n                            quality: 0.4, // Adjust the quality (0.0 - 1.0, default is 0.9)\n                        };\n\n                        pdf.save('map.pdf', pdfOptions);\n                        setAlertMessage('Map exported as PDF successfully!')\n                        setShowAlert(true)\n                    };\n                    img.src = reader.result;\n                };\n                reader.readAsDataURL(blob);\n            })\n            .catch((error) => {\n                console.error('Error exporting map image:', error);\n            });\n    };\n\n    return (\n        <button onClick={handleExportMapPDF} className=\"print_map_btn\">\n            <AiFillPrinter />\n        </button>\n    )\n}\n\nexport default ExportMapButton","import React, { useState } from 'react';\nimport layerIcon from \"../assets/layer-control.png\";\n\nconst LayerControlBtn = ({ setBaseLayers, baseLayers, layersItems, setSingleBaseLayer, singlebaseLayer, singleLayerItems }) => {\n\n    const handleBaseLayerChange = (event) => {\n        const value = event.target.value;\n        if (event.target.checked) {\n            setBaseLayers((prevLayers) => [...prevLayers, value]);\n        } else {\n            setBaseLayers((prevLayers) => prevLayers.filter((layer) => layer !== value));\n        }\n    };\n\n    const handleSingleBaseLayerChange = (event) => {\n        setSingleBaseLayer(event.target.value);\n    };\n\n\n    const [isLayerControlVisible, setLayerControlVisible] = useState(false);\n\n    const handleLayerIconHover = () => {\n        setLayerControlVisible(true);\n    };\n\n    const handleLayerControlHover = () => {\n        setLayerControlVisible(true);\n    };\n\n    const handleLayerControlLeave = () => {\n        setLayerControlVisible(false);\n    };\n\n    return (\n        <>\n            <div\n                className=\"layer_icon\"\n                onMouseEnter={handleLayerIconHover}\n            >\n                <img src={layerIcon} alt=\"Layer\" />\n            </div>\n\n            <div\n                className={`layercontrol_container ${isLayerControlVisible ? \"visible\" : \"\"}`}\n                onMouseEnter={handleLayerControlHover}\n                onMouseLeave={handleLayerControlLeave}\n            >\n\n                {singleLayerItems.map((item) => (\n                    <div key={item.value} className=\"layercontrol_item\">\n                        <label>\n                            <input\n                                type=\"radio\"\n                                value={item.value}\n                                checked={singlebaseLayer === item.value}\n                                onChange={handleSingleBaseLayerChange}\n                            />\n                            <span>{item.label}</span>\n                        </label>\n                    </div>\n                ))}\n\n                {layersItems.map((item) => (\n                    <div key={item.value} className=\"layercontrol_item\">\n                        <label>\n                            <input\n                                type=\"checkbox\"\n                                value={item.value}\n                                checked={baseLayers.includes(item.value)}\n                                onChange={handleBaseLayerChange}\n                            />\n                            <span>{item.label}</span>\n                        </label>\n                    </div>\n                ))}\n            </div>\n        </>\n    );\n};\n\nexport default LayerControlBtn;\n","import React, { useRef, useState } from \"react\";\nimport { setWindowWidth } from \"../utilities/Functions\";\nimport { setInitialMapZoom } from \"../utilities/Functions\";\nimport { setDragging } from \"../utilities/Functions\";\nimport {\n    MapContainer,\n    useMapEvents,\n    GeoJSON,\n    FeatureGroup,\n    ScaleControl, \n} from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport 'leaflet-fullscreen/dist/Leaflet.fullscreen.js';\nimport 'leaflet-fullscreen/dist/leaflet.fullscreen.css';\nimport CORONA from \"../data/CORONA.json\"\nimport Anaemia from \"../data/Anaemia.json\"\nimport MALARIA from \"../data/MALARIA.json\"\nimport Dengue from \"../data/Dengue.json\"\nimport ExportMapButton from \"../components/ExportMapButton\";\n\nimport LayerControlBtn from \"../components/LayerControlBtn\";\nimport { Link } from \"react-router-dom\";\n\nconst Legend = ({ singlebaseLayer }) => {\n    const legendData = {\n        Corana: [\n            { color: \"#F50000\", label: \"> 1,500,000\" },\n            { color: \"#F57A00\", label: \"1,000,000 - 1,500,000\" },\n            { color: \"#F5F500\", label: \"500,000 - 1,000,000\" },\n            { color: \"#F6FFDE\", label: \"300,000 - 500,000\" },\n            { color: \"#82CD47\", label: \"100,000 - 300,000\" },\n            { color: \"#379237\", label: \"< 100,000\" },\n        ],\n        Malaria: [\n            { color: \"#F50000\", label: \"> 10,000\" },\n            { color: \"#F57A00\", label: \"5,000 - 10,000\" },\n            { color: \"#F5F500\", label: \"3,000 - 5,000\" },\n            { color: \"#F6FFDE\", label: \"2,000 - 3,000\" },\n            { color: \"#82CD47\", label: \"500 - 2,000\" },\n            { color: \"#379237\", label: \"< 500\" },\n        ],\n        Dengue: [\n            { color: \"#F50000\", label: \"> 10,000\" },\n            { color: \"#F57A00\", label: \"5,000 - 10,000\" },\n            { color: \"#F5F500\", label: \"3,000 - 5,000\" },\n            { color: \"#F6FFDE\", label: \"2,000 - 3,000\" },\n            { color: \"#82CD47\", label: \"500 - 2,000\" },\n            { color: \"#379237\", label: \"< 500\" },\n        ],\n        Anaemia: [\n            { color: \"#F50000\", label: \"> 80\" },\n            { color: \"#F57A00\", label: \"70 - 80\" },\n            { color: \"#F5F500\", label: \"60 - 70\" },\n            { color: \"#F6FFDE\", label: \"50 - 60\" },\n            { color: \"#82CD47\", label: \"40 - 50\" },\n            { color: \"#379237\", label: \"< 40\" },\n        ],\n    };\n\n    const selectedLegend = legendData[singlebaseLayer];\n\n    return (\n        <div className=\"legend_container\">\n            <h5>Legend</h5>\n            <p>{singlebaseLayer} Cases</p>\n            {selectedLegend.map((item) => (\n                <div key={item.color} className=\"legend_item\">\n                    <span className=\"legend_item_square\" style={{ backgroundColor: item.color }} />\n                    <span className=\"legend-label\">{item.label}</span>\n                </div>\n            ))}\n        </div>\n    );\n};\n\n\n\nconst EpidemicsMap = () => {\n    const [mousePosition, setMousePosition] = useState({ lat: 0, lng: 0 });\n    const mapContainerRef = useRef(null);\n\n    const HandleMouseHover = () => {\n        useMapEvents({\n            mousemove: (e) => {\n                setMousePosition(e.latlng);\n            },\n        });\n        return null;\n    };\n\n\n\n    const CoronaColorToDensity = (density => {\n        return density > 1500000\n            ? '#F50000'\n            : density > 1000000\n                ? '#F57A00'\n                : density > 500000\n                    ? '#F5F500'\n                    : density > 300000\n                        ? '#F6FFDE'\n                        : density > 100000\n                            ? '#82CD47'\n                            : '#379237';\n    })\n    const CoronaStyle = (feature => {\n        return ({\n            fillColor: CoronaColorToDensity(feature.properties.TOTAL_CONF),\n            weight: 1,\n            opacity: 1,\n            color: 'black',\n            dashArray: '2',\n            fillOpacity: 0.8\n        });\n    });\n    function onEachFeatureCorona(feature, layer) {\n        layer.on('mouseover', function (e) {\n            if (feature.properties && feature.properties.Name) {\n                const popupContent = `\n              <div>\n              <h6>Corona</h6>\n                STATE: ${feature.properties.Name}<br/>\n                TOTAL_CONF: ${feature.properties.TOTAL_CONF}<br/>\n                CURED: ${feature.properties.CURED}<br/>\n                DEATHS: ${feature.properties.DEATHS}<br/>\n              </div>\n            `;\n                layer.bindTooltip(popupContent,{sticky:true});\n            }\n            layer.openTooltip();\n        });\n\n        layer.on('mouseout', function () {\n            layer.closeTooltip();\n        });\n    }\n\n\n    const MalariaColorToDensity = (density => {\n        return density > 10000\n            ? '#F50000'\n            : density > 5000\n                ? '#F57A00'\n                : density > 3000\n                    ? '#F5F500'\n                    : density > 2000\n                        ? '#F6FFDE'\n                        : density > 500\n                            ? '#82CD47'\n                            : '#379237';\n    })\n\n\n\n    const MalariaStyle = (feature => {\n        return ({\n            fillColor: MalariaColorToDensity(feature.properties.CASES),\n            weight: 1,\n            opacity: 1,\n            color: 'black',\n            dashArray: '2',\n            fillOpacity: 0.8\n        });\n    });\n\n    function onEachFeatureMalaria(feature, layer) {\n        layer.on('mouseover', function (e) {\n            if (feature.properties && feature.properties.Name) {\n                const popupContent = `\n              <div>\n              <h6>Malaria</h6>\n                STATE: ${feature.properties.Name}<br/>\n                CASES: ${feature.properties.CASES}<br/>\n                DEATHS: ${feature.properties.DEATHS}<br/>\n              </div>\n            `;\n                layer.bindTooltip(popupContent,{sticky:true});\n            }\n            layer.openTooltip();\n        });\n\n        layer.on('mouseout', function () {\n            layer.closeTooltip();\n        });\n    }\n\n    const AnaemiaColorToDensity = (density => {\n        return density > 80\n            ? '#F50000'\n            : density > 70\n                ? '#F57A00'\n                : density > 60\n                    ? '#F5F500'\n                    : density > 50\n                        ? '#F6FFDE'\n                        : density >40\n                            ? '#82CD47'\n                            : '#379237';\n    })\n    const AnaemiaStyle = (feature => {\n        return ({\n            fillColor: AnaemiaColorToDensity(feature.properties.anaemia),\n            weight: 1,\n            opacity: 1,\n            color: 'black',\n            dashArray: '2',\n            fillOpacity: 0.8\n        });\n    });\n\n    function onEachFeatureAnaemia(feature, layer) {\n        layer.on('mouseover', function (e) {\n            if (feature.properties && feature.properties.Name) {\n                const popupContent = `\n              <div>\n              <h6>Anaemia</h6>\n                STATE: ${feature.properties.Name}<br/>\n                Anaemia: ${feature.properties.anaemia}<br/>\n              </div>\n            `;\n                layer.bindTooltip(popupContent,{sticky:true});\n            }\n            layer.openTooltip();\n        });\n\n        layer.on('mouseout', function () {\n            layer.closeTooltip();\n        });\n    }\n\n\n    const DengueColorToDensity = (density => {\n        return density > 10000\n            ? '#F50000'\n            : density > 5000\n                ? '#F57A00'\n                : density > 3000\n                    ? '#F5F500'\n                    : density > 2000\n                        ? '#F6FFDE'\n                        : density > 500\n                            ? '#82CD47'\n                            : '#379237';\n    })\n    const DengueStyle = (feature => {\n        return ({\n            fillColor: DengueColorToDensity(feature.properties.Cas_2020),\n            weight: 1,\n            opacity: 1,\n            color: 'black',\n            dashArray: '2',\n            fillOpacity: 0.8\n        });\n    });\n\n    function onEachFeatureDengue(feature, layer) {\n        layer.on('mouseover', function (e) {\n            if (feature.properties && feature.properties.Name) {\n                const popupContent = `\n              <div>\n              <h6>Dengue</h6>\n                STATE: ${feature.properties.Name}<br/>\n                Cases 2018: ${feature.properties.Cas_2018}<br/>\n                Death 2018: ${feature.properties.Dea_2018}<br/>\n                Cases 2019: ${feature.properties.Cas_2019}<br/>\n                Death 2019: ${feature.properties.Dea_2019}<br/>\n                Cases 2020: ${feature.properties.Cas_2020}<br/>\n                Death 2020: ${feature.properties.Dea_2020}<br/>\n              </div>\n            `;\n                layer.bindTooltip(popupContent,{sticky:true});\n            }\n            layer.openTooltip();\n        });\n\n        layer.on('mouseout', function () {\n            layer.closeTooltip();\n        });\n    }\n\n    const [singlebaseLayer, setSingleBaseLayer] = useState(\"Corana\");\n    const singleLayerItems = [\n        { value: \"Corana\", label: \"Corana\" },\n        { value: \"Malaria\", label: \"Malaria\" },\n        { value: \"Anaemia\", label: \"Anaemia\" },\n        { value: \"Dengue\", label: \"Dengue\" },\n\n\n    ];\n\n\n\n\n    const [baseLayers, setBaseLayers] = useState([\"\"]);\n    const layersItems = [\n\n    ];\n\n    \n\n    \n\n\n\n    return (\n        <div className=\"main_page_container\">\n            <div className=\"row\">\n                <div className=\"col-lg-3 col-md-12\">\n                    <div className=\"info_container\">\n                        <h3>Epidemics</h3>\n                        <p>\n                        An epidemic refers to the abrupt outbreak of a disease, characterized by the widespread occurrence of an infectious ailment within a particular community during a specific period. During an epidemic, the number of individuals affected by the disease surpasses the usual expectations. These occurrences are marked by an unforeseen and often rapid surge in the prevalence of a specific illness within a community, impacting a broader geographical area compared to an outbreak. \n\n                        </p>\n                        <Link to=\"/epidemics/epidemics-details\"> <button className=\"general_button\">Read More</button></Link>\n            <Link to=\"/epidemics/quiz\"> <button className=\"general_button\">Quiz</button></Link>\n\n                    </div>\n\n                </div>\n\n                <div className=\"col-lg-9 col-md-12\">\n                    <div className=\"map_container\" ref={mapContainerRef}>\n                        <MapContainer\n                            center={[22, 84]}\n                            fullscreenControl={true}\n                            zoom={setInitialMapZoom()}\n                            style={setWindowWidth()}\n                            attributionControl={false}\n                            scrollWheelZoom={false}\n                            zoomDelta={0.25}\n                            zoomSnap={0}\n                            minZoom={3}\n                            keyboard={false}\n                            dragging={setDragging()}\n                            // touchZoom={false}\n                            doubleClickZoom={false}\n                            maxZoom={9}\n                        >\n                            <HandleMouseHover />\n\n                            <ScaleControl />\n                            <LayerControlBtn setBaseLayers={setBaseLayers} baseLayers={baseLayers} layersItems={layersItems} singlebaseLayer={singlebaseLayer} setSingleBaseLayer={setSingleBaseLayer} singleLayerItems={singleLayerItems}/>\n\n\n                            {singlebaseLayer === \"Corana\" && (\n                                <FeatureGroup>\n                                    <GeoJSON\n                                        data={CORONA.features}\n                                        onEachFeature={onEachFeatureCorona}\n                                        style={CoronaStyle}\n                                    />\n                                </FeatureGroup>\n                            )}\n\n                            {singlebaseLayer === \"Malaria\" && (\n                                <FeatureGroup>\n                                    <GeoJSON\n                                        data={MALARIA.features}\n                                        style={MalariaStyle}\n                                        onEachFeature={onEachFeatureMalaria}\n                                    />\n                                </FeatureGroup>\n                            )}\n                            \n                            {singlebaseLayer === \"Dengue\" && (\n                                <FeatureGroup>\n                                    <GeoJSON\n                                        data={Dengue.features}\n                                        style={DengueStyle}\n                                        onEachFeature={onEachFeatureDengue}\n                                    />\n                                </FeatureGroup>\n                            )}\n                            {singlebaseLayer === \"Anaemia\" && (\n                                <FeatureGroup>\n                                    <GeoJSON\n                                        data={Anaemia.features}\n                                        style={AnaemiaStyle}\n                                        onEachFeature={onEachFeatureAnaemia}\n                                    />\n                                </FeatureGroup>\n                            )}\n\n\n                            <ExportMapButton mapContainerRef={mapContainerRef} mapTitle=\"Natural Disaster: Epidemics\" />\n\n                            <div\n                                style={{\n                                    position: \"absolute\",\n                                    bottom: 10,\n                                    right: 10,\n                                    backgroundColor: \"white\",\n                                    padding: 5,\n                                }}\n                            >\n                                Lat: {mousePosition.lat.toFixed(4)}, Long:{\" \"}\n                                {mousePosition.lng.toFixed(4)}\n                            </div>\n                            <div className=\"desktop_legend_container\">\n\n                                {singlebaseLayer && <Legend singlebaseLayer={singlebaseLayer} />}\n                            </div>\n\n                        </MapContainer>\n                        <div className=\"phone_legend_container\">\n                            {singlebaseLayer && <Legend singlebaseLayer={singlebaseLayer} />}\n                        </div>\n                    </div>\n\n\n\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default EpidemicsMap","\nexport const setWindowWidth=()=> {\n    var viewportWidth = window.innerWidth;\n    var windowWidth;\n    if (viewportWidth <= [767]) {\n        windowWidth = { width: '100%', height: \"600px\", backgroundColor: 'white', border: 'none', margin: 'auto', borderRadius: \"0px\", };\n    } else {\n        windowWidth = { width: '100%', height: \"600px\", backgroundColor: 'white', border: 'none', margin: 'auto', borderRadius: \"10px\", };\n    }\n    return windowWidth;\n}\n\n\nexport const setInitialMapZoom=()=> {\n    var viewportWidth = window.innerWidth;\n    var mapZoom;\n    if (viewportWidth <= [767]) {\n      mapZoom = [3.75];\n    } if (viewportWidth >= [768]) {\n      mapZoom = [4.5];\n    } if (viewportWidth >= [1600]) {\n      mapZoom = [4.5];\n    }\n    return mapZoom;\n  }\n\n  \n  export const setDragging=()=> {\n    var viewportWidth = window.innerWidth;\n    var dragging;\n    if (viewportWidth <= [767]) {\n      dragging = false;\n    } if (viewportWidth >= [768]) {\n      dragging = true;\n    } \n    return dragging;\n  }","import { createElementObject, createPathComponent, extendContext } from '@react-leaflet/core';\nimport { FeatureGroup as LeafletFeatureGroup } from 'leaflet';\nexport const FeatureGroup = createPathComponent(function createFeatureGroup({ children: _c , ...options }, ctx) {\n    const group = new LeafletFeatureGroup([], options);\n    return createElementObject(group, extendContext(ctx, {\n        layerContainer: group,\n        overlayContainer: group\n    }));\n});\n"],"names":["_ref","mapContainerRef","mapTitle","_useAlertContext","useAlertContext","setAlertMessage","setShowAlert","_jsx","onClick","mapContainer","current","viewportWidth","window","innerWidth","options","width","offsetWidth","height","offsetHeight","style","transform","transformOrigin","domtoimage","then","blob","reader","FileReader","onloadend","img","Image","onload","aspectRatio","pdfOrientation","pdf","jsPDF","title","titleTextWidth","getStringUnitWidth","internal","scaleFactor","titleTextX","pageSize","getWidth","setFontSize","text","pdfHeight","getHeight","pdfWidth","x","y","addImage","websiteName","textWidth","textX","textY","save","compress","quality","src","result","readAsDataURL","catch","error","console","className","children","AiFillPrinter","setBaseLayers","baseLayers","layersItems","setSingleBaseLayer","singlebaseLayer","singleLayerItems","handleBaseLayerChange","event","value","target","checked","prevLayers","concat","_toConsumableArray","filter","layer","handleSingleBaseLayerChange","_useState","useState","_useState2","_slicedToArray","isLayerControlVisible","setLayerControlVisible","_jsxs","_Fragment","onMouseEnter","alt","onMouseLeave","map","item","type","onChange","label","includes","Legend","selectedLegend","Corana","color","Malaria","Dengue","Anaemia","backgroundColor","lat","lng","mousePosition","setMousePosition","useRef","HandleMouseHover","useMapEvents","mousemove","e","latlng","_useState3","_useState4","_useState5","_useState6","Link","to","ref","MapContainer","center","fullscreenControl","zoom","setInitialMapZoom","setWindowWidth","attributionControl","scrollWheelZoom","zoomDelta","zoomSnap","minZoom","keyboard","dragging","setDragging","doubleClickZoom","maxZoom","ScaleControl","LayerControlBtn","FeatureGroup","GeoJSON","data","CORONA","onEachFeature","feature","on","properties","Name","popupContent","TOTAL_CONF","CURED","DEATHS","bindTooltip","sticky","openTooltip","closeTooltip","fillColor","density","weight","opacity","dashArray","fillOpacity","MALARIA","CASES","Cas_2020","Cas_2018","Dea_2018","Cas_2019","Dea_2019","Dea_2020","anaemia","ExportMapButton","position","bottom","right","padding","toFixed","border","margin","borderRadius","mapZoom","createPathComponent","ctx","_objectWithoutProperties","_excluded","group","LeafletFeatureGroup","createElementObject","extendContext","layerContainer","overlayContainer"],"sourceRoot":""}