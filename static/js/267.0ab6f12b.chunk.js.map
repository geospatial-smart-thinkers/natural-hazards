{"version":3,"file":"static/js/267.0ab6f12b.chunk.js","mappings":"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","sources":["components/ExportMapButton.jsx","components/LayerControlBtn.jsx","utilities/Functions.jsx"],"sourcesContent":["import React from 'react'\nimport jsPDF from 'jspdf';\nimport domtoimage from 'dom-to-image';\nimport { AiFillPrinter } from 'react-icons/ai';\nimport { useAlertContext } from '../context/AlertContext';\n\nconst ExportMapButton = ({ mapContainerRef, mapTitle }) => {\n    const { setAlertMessage, setShowAlert } = useAlertContext();\n    const handleExportMapPDF = () => {\n        const mapContainer = mapContainerRef.current;\n        const viewportWidth = window.innerWidth;\n\n        setAlertMessage('Your download is starting')\n        setShowAlert(true)\n\n\n        const options = {\n            width: mapContainer.offsetWidth * 2,\n            height: mapContainer.offsetHeight * 2,\n            style: {\n                transform: 'scale(2)',\n                transformOrigin: 'top left',\n                width: '100%',\n                height: 'auto',\n            },\n        };\n\n        domtoimage\n            .toBlob(mapContainer, options)\n            .then((blob) => {\n                const reader = new FileReader();\n                reader.onloadend = () => {\n                    const img = new Image();\n                    img.onload = () => {\n                        const aspectRatio = img.width / img.height;\n                        const pdfOrientation = viewportWidth <= 767 ? 'portrait' : 'landscape';\n                        const pdf = new jsPDF(pdfOrientation, 'px', 'a4');\n\n                        // Add title at the top\n                        const title = mapTitle;\n                        const titleFontSize = 16;\n                        const titleTextWidth = pdf.getStringUnitWidth(title) * titleFontSize / pdf.internal.scaleFactor;\n                        const titleTextX = (pdf.internal.pageSize.getWidth() - titleTextWidth) / 2;\n                        const titleTextY = 20; // Y-coordinate for the title\n\n                        pdf.setFontSize(titleFontSize);\n                        pdf.text(titleTextX, titleTextY, title);\n\n\n                        if (viewportWidth <= 767) {\n                            const pdfHeight = pdf.internal.pageSize.getHeight() - 50; // Set the desired height for PDF if viewport width <= 767\n                            const pdfWidth = pdfHeight * aspectRatio;\n                            const x = (pdf.internal.pageSize.getWidth() - pdfWidth) / 2;\n                            const y = (pdf.internal.pageSize.getHeight() - pdfHeight) / 2;\n                            pdf.addImage(img, 'PNG', x, y, pdfWidth, pdfHeight);\n                        } else {\n                            const pdfWidth = pdf.internal.pageSize.getWidth(); // Use A4 width for PDF if viewport width > 767\n                            const pdfHeight = pdfWidth / aspectRatio;\n                            const x = 0;\n                            const y = (pdf.internal.pageSize.getHeight() - pdfHeight) / 2;\n                            pdf.addImage(img, 'PNG', x, y, pdfWidth, pdfHeight);\n                        }\n\n                        // Add text line at the bottom\n                        const websiteName = 'This map has been downloaded from GEOSPATIAL SMART THINKERS';\n                        const fontSize = 10;\n                        const textWidth = pdf.getStringUnitWidth(websiteName) * fontSize / pdf.internal.scaleFactor;\n                        const textX = (pdf.internal.pageSize.getWidth() - textWidth) / 2; // X-coordinate for center alignment\n                        const textY = pdf.internal.pageSize.getHeight() - 10; // Y-coordinate for the text\n\n                        pdf.setFontSize(fontSize);\n                        pdf.text(textX, textY, websiteName);\n\n                        const pdfOptions = {\n                            compress: true, // Enable compression\n                            quality: 0.4, // Adjust the quality (0.0 - 1.0, default is 0.9)\n                        };\n\n                        pdf.save('map.pdf', pdfOptions);\n                        setAlertMessage('Map exported as PDF successfully!')\n                        setShowAlert(true)\n                    };\n                    img.src = reader.result;\n                };\n                reader.readAsDataURL(blob);\n            })\n            .catch((error) => {\n                console.error('Error exporting map image:', error);\n            });\n    };\n\n    return (\n        <button onClick={handleExportMapPDF} className=\"print_map_btn\">\n            <AiFillPrinter />\n        </button>\n    )\n}\n\nexport default ExportMapButton","import React, { useState } from 'react';\nimport layerIcon from \"../assets/layer-control.png\";\n\nconst LayerControlBtn = ({ setBaseLayers, baseLayers, layersItems, setSingleBaseLayer, singlebaseLayer, singleLayerItems }) => {\n\n    const handleBaseLayerChange = (event) => {\n        const value = event.target.value;\n        if (event.target.checked) {\n            setBaseLayers((prevLayers) => [...prevLayers, value]);\n        } else {\n            setBaseLayers((prevLayers) => prevLayers.filter((layer) => layer !== value));\n        }\n    };\n\n    const handleSingleBaseLayerChange = (event) => {\n        setSingleBaseLayer(event.target.value);\n    };\n\n\n    const [isLayerControlVisible, setLayerControlVisible] = useState(false);\n\n    const handleLayerIconHover = () => {\n        setLayerControlVisible(true);\n    };\n\n    const handleLayerControlHover = () => {\n        setLayerControlVisible(true);\n    };\n\n    const handleLayerControlLeave = () => {\n        setLayerControlVisible(false);\n    };\n\n    return (\n        <>\n            <div\n                className=\"layer_icon\"\n                onMouseEnter={handleLayerIconHover}\n            >\n                <img src={layerIcon} alt=\"Layer\" />\n            </div>\n\n            <div\n                className={`layercontrol_container ${isLayerControlVisible ? \"visible\" : \"\"}`}\n                onMouseEnter={handleLayerControlHover}\n                onMouseLeave={handleLayerControlLeave}\n            >\n\n                {singleLayerItems.map((item) => (\n                    <div key={item.value} className=\"layercontrol_item\">\n                        <label>\n                            <input\n                                type=\"radio\"\n                                value={item.value}\n                                checked={singlebaseLayer === item.value}\n                                onChange={handleSingleBaseLayerChange}\n                            />\n                            <span>{item.label}</span>\n                        </label>\n                    </div>\n                ))}\n\n                {layersItems.map((item) => (\n                    <div key={item.value} className=\"layercontrol_item\">\n                        <label>\n                            <input\n                                type=\"checkbox\"\n                                value={item.value}\n                                checked={baseLayers.includes(item.value)}\n                                onChange={handleBaseLayerChange}\n                            />\n                            <span>{item.label}</span>\n                        </label>\n                    </div>\n                ))}\n            </div>\n        </>\n    );\n};\n\nexport default LayerControlBtn;\n","\nexport const setWindowWidth=()=> {\n    var viewportWidth = window.innerWidth;\n    var windowWidth;\n    if (viewportWidth <= [767]) {\n        windowWidth = { width: '100%', height: \"600px\", backgroundColor: 'white', border: 'none', margin: 'auto', borderRadius: \"0px\", };\n    } else {\n        windowWidth = { width: '100%', height: \"600px\", backgroundColor: 'white', border: 'none', margin: 'auto', borderRadius: \"10px\", };\n    }\n    return windowWidth;\n}\n\n\nexport const setInitialMapZoom=()=> {\n    var viewportWidth = window.innerWidth;\n    var mapZoom;\n    if (viewportWidth <= [767]) {\n      mapZoom = [3.75];\n    } if (viewportWidth >= [768]) {\n      mapZoom = [4.5];\n    } if (viewportWidth >= [1600]) {\n      mapZoom = [4.5];\n    }\n    return mapZoom;\n  }\n\n  export const setDragging=()=> {\n    var viewportWidth = window.innerWidth;\n    var dragging;\n    if (viewportWidth <= [767]) {\n      dragging = false;\n    } if (viewportWidth >= [768]) {\n      dragging = true;\n    } \n    return dragging;\n  }"],"names":["_ref","mapContainerRef","mapTitle","_useAlertContext","useAlertContext","setAlertMessage","setShowAlert","_jsx","onClick","mapContainer","current","viewportWidth","window","innerWidth","options","width","offsetWidth","height","offsetHeight","style","transform","transformOrigin","domtoimage","then","blob","reader","FileReader","onloadend","img","Image","onload","aspectRatio","pdfOrientation","pdf","jsPDF","title","titleTextWidth","getStringUnitWidth","internal","scaleFactor","titleTextX","pageSize","getWidth","setFontSize","text","pdfHeight","getHeight","pdfWidth","x","y","addImage","websiteName","textWidth","textX","textY","save","compress","quality","src","result","readAsDataURL","catch","error","console","className","children","AiFillPrinter","setBaseLayers","baseLayers","layersItems","setSingleBaseLayer","singlebaseLayer","singleLayerItems","handleBaseLayerChange","event","value","target","checked","prevLayers","concat","_toConsumableArray","filter","layer","handleSingleBaseLayerChange","_useState","useState","_useState2","_slicedToArray","isLayerControlVisible","setLayerControlVisible","_jsxs","_Fragment","onMouseEnter","alt","onMouseLeave","map","item","type","onChange","label","includes","setWindowWidth","backgroundColor","border","margin","borderRadius","setInitialMapZoom","mapZoom","setDragging","dragging"],"sourceRoot":""}