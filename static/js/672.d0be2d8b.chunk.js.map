{"version":3,"file":"static/js/672.d0be2d8b.chunk.js","mappings":"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","sources":["components/ExportMapButton.jsx","components/LayerControlBtn.jsx","maps/EpidemicsMap.jsx","utilities/Functions.jsx","../node_modules/react-leaflet/lib/FeatureGroup.js"],"sourcesContent":["import React from 'react'\nimport jsPDF from 'jspdf';\nimport domtoimage from 'dom-to-image';\nimport { AiFillPrinter } from 'react-icons/ai';\n\nconst ExportMapButton = ({ mapContainerRef, mapTitle }) => {\n\n    const handleExportMapPDF = () => {\n        const mapContainer = mapContainerRef.current;\n        const viewportWidth = window.innerWidth;\n\n        const options = {\n            width: mapContainer.offsetWidth * 2,\n            height: mapContainer.offsetHeight * 2,\n            style: {\n                transform: 'scale(2)',\n                transformOrigin: 'top left',\n                width: '100%',\n                height: 'auto',\n            },\n        };\n\n        domtoimage\n            .toBlob(mapContainer, options)\n            .then((blob) => {\n                const reader = new FileReader();\n                reader.onloadend = () => {\n                    const img = new Image();\n                    img.onload = () => {\n                        const aspectRatio = img.width / img.height;\n                        const pdfOrientation = viewportWidth <= 767 ? 'portrait' : 'landscape';\n                        const pdf = new jsPDF(pdfOrientation, 'px', 'a4');\n\n                        // Add title at the top\n                        const title = mapTitle;\n                        const titleFontSize = 16;\n                        const titleTextWidth = pdf.getStringUnitWidth(title) * titleFontSize / pdf.internal.scaleFactor;\n                        const titleTextX = (pdf.internal.pageSize.getWidth() - titleTextWidth) / 2;\n                        const titleTextY = 20; // Y-coordinate for the title\n\n                        pdf.setFontSize(titleFontSize);\n                        pdf.text(titleTextX, titleTextY, title);\n\n\n                        if (viewportWidth <= 767) {\n                            const pdfHeight = pdf.internal.pageSize.getHeight() - 50; // Set the desired height for PDF if viewport width <= 767\n                            const pdfWidth = pdfHeight * aspectRatio;\n                            const x = (pdf.internal.pageSize.getWidth() - pdfWidth) / 2;\n                            const y = (pdf.internal.pageSize.getHeight() - pdfHeight) / 2;\n                            pdf.addImage(img, 'PNG', x, y, pdfWidth, pdfHeight);\n                        } else {\n                            const pdfWidth = pdf.internal.pageSize.getWidth(); // Use A4 width for PDF if viewport width > 767\n                            const pdfHeight = pdfWidth / aspectRatio;\n                            const x = 0;\n                            const y = (pdf.internal.pageSize.getHeight() - pdfHeight) / 2;\n                            pdf.addImage(img, 'PNG', x, y, pdfWidth, pdfHeight);\n                        }\n\n                        // Add text line at the bottom\n                        const websiteName = 'This map has been downloaded from GEOSPATIAL SMART THINKERS';\n                        const fontSize = 10;\n                        const textWidth = pdf.getStringUnitWidth(websiteName) * fontSize / pdf.internal.scaleFactor;\n                        const textX = (pdf.internal.pageSize.getWidth() - textWidth) / 2; // X-coordinate for center alignment\n                        const textY = pdf.internal.pageSize.getHeight() - 10; // Y-coordinate for the text\n\n                        pdf.setFontSize(fontSize);\n                        pdf.text(textX, textY, websiteName);\n\n                        const pdfOptions = {\n                            compress: true, // Enable compression\n                            quality: 0.4, // Adjust the quality (0.0 - 1.0, default is 0.9)\n                        };\n\n                        pdf.save('map.pdf', pdfOptions);\n                    };\n                    img.src = reader.result;\n                };\n                reader.readAsDataURL(blob);\n            })\n            .catch((error) => {\n                console.error('Error exporting map image:', error);\n            });\n    };\n\n    return (\n        <button onClick={handleExportMapPDF} className=\"print_map_btn\">\n            <AiFillPrinter />\n        </button>\n    )\n}\n\nexport default ExportMapButton","import React, { useState } from 'react';\nimport layerIcon from \"../assets/layer-control.png\";\n\nconst LayerControlBtn = ({ setBaseLayers, baseLayers, layersItems, setSingleBaseLayer, singlebaseLayer, singleLayerItems }) => {\n\n    const handleBaseLayerChange = (event) => {\n        const value = event.target.value;\n        if (event.target.checked) {\n            setBaseLayers((prevLayers) => [...prevLayers, value]);\n        } else {\n            setBaseLayers((prevLayers) => prevLayers.filter((layer) => layer !== value));\n        }\n    };\n\n    const handleSingleBaseLayerChange = (event) => {\n        setSingleBaseLayer(event.target.value);\n    };\n\n\n    const [isLayerControlVisible, setLayerControlVisible] = useState(false);\n\n    const handleLayerIconHover = () => {\n        setLayerControlVisible(true);\n    };\n\n    const handleLayerControlHover = () => {\n        setLayerControlVisible(true);\n    };\n\n    const handleLayerControlLeave = () => {\n        setLayerControlVisible(false);\n    };\n\n    return (\n        <>\n            <div\n                className=\"layer_icon\"\n                onMouseEnter={handleLayerIconHover}\n            >\n                <img src={layerIcon} alt=\"Layer\" />\n            </div>\n\n            <div\n                className={`layercontrol_container ${isLayerControlVisible ? \"visible\" : \"\"}`}\n                onMouseEnter={handleLayerControlHover}\n                onMouseLeave={handleLayerControlLeave}\n            >\n\n                {singleLayerItems.map((item) => (\n                    <div key={item.value} className=\"layercontrol_item\">\n                        <label>\n                            <input\n                                type=\"radio\"\n                                value={item.value}\n                                checked={singlebaseLayer === item.value}\n                                onChange={handleSingleBaseLayerChange}\n                            />\n                            <span>{item.label}</span>\n                        </label>\n                    </div>\n                ))}\n\n                {layersItems.map((item) => (\n                    <div key={item.value} className=\"layercontrol_item\">\n                        <label>\n                            <input\n                                type=\"checkbox\"\n                                value={item.value}\n                                checked={baseLayers.includes(item.value)}\n                                onChange={handleBaseLayerChange}\n                            />\n                            <span>{item.label}</span>\n                        </label>\n                    </div>\n                ))}\n            </div>\n        </>\n    );\n};\n\nexport default LayerControlBtn;\n","import React, { useRef, useState } from \"react\";\nimport { setWindowWidth } from \"../utilities/Functions\";\nimport { setInitialMapZoom } from \"../utilities/Functions\";\nimport { setDragging } from \"../utilities/Functions\";\nimport {\n    MapContainer,\n    useMapEvents,\n    GeoJSON,\n    FeatureGroup,\n    ScaleControl, \n} from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport 'leaflet-fullscreen/dist/Leaflet.fullscreen.js';\nimport 'leaflet-fullscreen/dist/leaflet.fullscreen.css';\nimport CORONA from \"../data/CORONA.json\"\nimport MALARIA from \"../data/MALARIA.json\"\nimport ExportMapButton from \"../components/ExportMapButton\";\n\nimport LayerControlBtn from \"../components/LayerControlBtn\";\n\nconst Legend = ({ singlebaseLayer }) => {\n    const coronaLegend = [\n        { color: \"red\", label: \"> 1,500,000\" },\n        { color: \"purple\", label: \"1,000,000 - 1,500,000\" },\n        { color: \"blue\", label: \"500,000 - 1,000,000\" },\n        { color: \"green\", label: \"300,000 - 500,000\" },\n        { color: \"orange\", label: \"100,000 - 300,000\" },\n        { color: \"yellow\", label: \"< 100,000\" },\n    ];\n\n    const malariaLegend = [\n        { color: \"red\", label: \"> 10,000\" },\n        { color: \"purple\", label: \"5,000 - 10,000\" },\n        { color: \"blue\", label: \"3,000 - 5,000\" },\n        { color: \"green\", label: \"2,000 - 3,000\" },\n        { color: \"orange\", label: \"500 - 2,000\" },\n        { color: \"yellow\", label: \"< 500\" },\n    ];\n\n    const legendData = singlebaseLayer === \"Corana\" ? coronaLegend : malariaLegend;\n\n    return (\n        <div className=\"legend_container\">\n            <h5>Legend</h5>\n            <p>{singlebaseLayer} Cases</p>\n            {legendData.map((item) => (\n                <div key={item.color} className=\"legend_item\">\n                    <span className=\"legend_item_square\" style={{ backgroundColor: item.color }} />\n                    <span className=\"legend-label\">{item.label}</span>\n                </div>\n            ))}\n        </div>\n    );\n};\n\n\nconst EpidemicsMap = () => {\n    const [mousePosition, setMousePosition] = useState({ lat: 0, lng: 0 });\n    const mapContainerRef = useRef(null);\n\n    const HandleMouseHover = () => {\n        useMapEvents({\n            mousemove: (e) => {\n                setMousePosition(e.latlng);\n            },\n        });\n        return null;\n    };\n\n\n\n    const CoronaColorToDensity = (density => {\n        return density > 1500000\n            ? 'red'\n            : density > 1000000\n                ? 'purple'\n                : density > 500000\n                    ? 'blue'\n                    : density > 300000\n                        ? 'green'\n                        : density > 100000\n                            ? 'orange'\n                            : 'yellow';\n    })\n    const CoronaStyle = (feature => {\n        return ({\n            fillColor: CoronaColorToDensity(feature.properties.TOTAL_CONF),\n            weight: 1,\n            opacity: 1,\n            color: 'black',\n            dashArray: '2',\n            fillOpacity: 0.5\n        });\n    });\n    function onEachFeatureCorona(feature, layer) {\n        layer.on('mouseover', function (e) {\n            if (feature.properties && feature.properties.Name) {\n                const popupContent = `\n              <div>\n              <h6>Corona</h6>\n                STATE: ${feature.properties.Name}<br/>\n                TOTAL_CONF: ${feature.properties.TOTAL_CONF}<br/>\n                CURED: ${feature.properties.CURED}<br/>\n                DEATHS: ${feature.properties.DEATHS}<br/>\n              </div>\n            `;\n                layer.bindTooltip(popupContent,{sticky:true});\n            }\n            layer.openTooltip();\n        });\n\n        layer.on('mouseout', function () {\n            layer.closeTooltip();\n        });\n    }\n\n\n    const MalariaColorToDensity = (density => {\n        return density > 10000\n            ? 'red'\n            : density > 5000\n                ? 'purple'\n                : density > 3000\n                    ? 'blue'\n                    : density > 2000\n                        ? 'green'\n                        : density > 500\n                            ? 'orange'\n                            : 'yellow';\n    })\n    const MalariaStyle = (feature => {\n        return ({\n            fillColor: MalariaColorToDensity(feature.properties.CASES),\n            weight: 1,\n            opacity: 1,\n            color: 'black',\n            dashArray: '2',\n            fillOpacity: 0.5\n        });\n    });\n\n    function onEachFeatureMalaria(feature, layer) {\n        layer.on('mouseover', function (e) {\n            if (feature.properties && feature.properties.Name) {\n                const popupContent = `\n              <div>\n              <h6>Malaria</h6>\n                STATE: ${feature.properties.Name}<br/>\n                CASES: ${feature.properties.CASES}<br/>\n                DEATHS: ${feature.properties.DEATHS}<br/>\n              </div>\n            `;\n                layer.bindTooltip(popupContent,{sticky:true});\n            }\n            layer.openTooltip();\n        });\n\n        layer.on('mouseout', function () {\n            layer.closeTooltip();\n        });\n    }\n\n    const [singlebaseLayer, setSingleBaseLayer] = useState(\"Corana\");\n    const singleLayerItems = [\n        { value: \"Corana\", label: \"Corana\" },\n        { value: \"Malaria\", label: \"Malaria\" },\n\n\n    ];\n\n\n\n\n    const [baseLayers, setBaseLayers] = useState([\"\"]);\n    const layersItems = [\n\n    ];\n\n    \n\n    \n\n\n\n    return (\n        <div className=\"main_page_container\">\n            <div className=\"row\">\n                <div className=\"col-md-3\">\n                    <div className=\"info_container\">\n                        <h3>Epidemics</h3>\n                        <p>\n                            India, like many other countries, faces various epidemics and outbreaks of infectious diseases. Some of the common diseases prevalent in India include malaria, dengue fever, cholera, tuberculosis, HIV/AIDS, and respiratory infections. Factors such as population density, inadequate healthcare infrastructure, poor sanitation, and limited access to clean water contribute to the spread of these diseases. The Indian government, along with public health agencies and non-governmental organizations, works actively to prevent and control epidemics through measures such as vaccination programs, disease surveillance, health education campaigns, and improving healthcare facilities in remote areas. Additionally, during outbreaks, rapid response teams are deployed to affected regions to provide medical assistance, conduct contact tracing, and implement necessary containment measures.\n                        </p>\n\n                    </div>\n\n                </div>\n\n                <div className=\"col-md-9\">\n                    <div className=\"map_container\" ref={mapContainerRef}>\n                        <MapContainer\n                            center={[22, 84]}\n                            fullscreenControl={true}\n                            zoom={setInitialMapZoom()}\n                            style={setWindowWidth()}\n                            attributionControl={false}\n                            scrollWheelZoom={false}\n                            zoomDelta={0.25}\n                            zoomSnap={0}\n                            minZoom={3}\n                            keyboard={false}\n                            dragging={setDragging()}\n                            // touchZoom={false}\n                            doubleClickZoom={false}\n                            maxZoom={9}\n                        >\n                            <HandleMouseHover />\n\n                            <ScaleControl />\n                            <LayerControlBtn setBaseLayers={setBaseLayers} baseLayers={baseLayers} layersItems={layersItems} singlebaseLayer={singlebaseLayer} setSingleBaseLayer={setSingleBaseLayer} singleLayerItems={singleLayerItems}/>\n\n\n                            {singlebaseLayer === \"Corana\" && (\n                                <FeatureGroup>\n                                    <GeoJSON\n                                        data={CORONA.features}\n                                        onEachFeature={onEachFeatureCorona}\n                                        style={CoronaStyle}\n                                    />\n                                </FeatureGroup>\n                            )}\n                            {singlebaseLayer === \"Malaria\" && (\n                                <FeatureGroup>\n                                    <GeoJSON\n                                        data={MALARIA.features}\n                                        style={MalariaStyle}\n                                        onEachFeature={onEachFeatureMalaria}\n                                    />\n                                </FeatureGroup>\n                            )}\n\n\n                            <ExportMapButton mapContainerRef={mapContainerRef} mapTitle=\"Natural Disaster: Epidemics\" />\n\n                            <div\n                                style={{\n                                    position: \"absolute\",\n                                    bottom: 10,\n                                    right: 10,\n                                    backgroundColor: \"white\",\n                                    padding: 5,\n                                }}\n                            >\n                                Lat: {mousePosition.lat.toFixed(4)}, Long:{\" \"}\n                                {mousePosition.lng.toFixed(4)}\n                            </div>\n                            <div className=\"desktop_legend_container\">\n\n                                {singlebaseLayer && <Legend singlebaseLayer={singlebaseLayer} />}\n                            </div>\n\n                        </MapContainer>\n                        <div className=\"phone_legend_container\">\n                            {singlebaseLayer && <Legend singlebaseLayer={singlebaseLayer} />}\n                        </div>\n                    </div>\n\n\n\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default EpidemicsMap","\nexport const setWindowWidth=()=> {\n    var viewportWidth = window.innerWidth;\n    var windowWidth;\n    if (viewportWidth <= [767]) {\n        windowWidth = { width: '100%', height: \"600px\", backgroundColor: 'white', border: 'none', margin: 'auto', borderRadius: \"0px\", };\n    } else {\n        windowWidth = { width: '100%', height: \"600px\", backgroundColor: 'white', border: 'none', margin: 'auto', borderRadius: \"10px\", };\n    }\n    return windowWidth;\n}\n\n\nexport const setInitialMapZoom=()=> {\n    var viewportWidth = window.innerWidth;\n    var mapZoom;\n    if (viewportWidth <= [767]) {\n      mapZoom = [3.75];\n    } if (viewportWidth >= [768]) {\n      mapZoom = [4.5];\n    } if (viewportWidth >= [1600]) {\n      mapZoom = [4.5];\n    }\n    return mapZoom;\n  }\n\n  export const setDragging=()=> {\n    var viewportWidth = window.innerWidth;\n    var dragging;\n    if (viewportWidth <= [767]) {\n      dragging = false;\n    } if (viewportWidth >= [768]) {\n      dragging = true;\n    } \n    return dragging;\n  }","import { createElementObject, createPathComponent, extendContext } from '@react-leaflet/core';\nimport { FeatureGroup as LeafletFeatureGroup } from 'leaflet';\nexport const FeatureGroup = createPathComponent(function createFeatureGroup({ children: _c , ...options }, ctx) {\n    const group = new LeafletFeatureGroup([], options);\n    return createElementObject(group, extendContext(ctx, {\n        layerContainer: group,\n        overlayContainer: group\n    }));\n});\n"],"names":["_ref","mapContainerRef","mapTitle","_jsx","onClick","mapContainer","current","viewportWidth","window","innerWidth","options","width","offsetWidth","height","offsetHeight","style","transform","transformOrigin","domtoimage","then","blob","reader","FileReader","onloadend","img","Image","onload","aspectRatio","pdfOrientation","pdf","jsPDF","title","titleTextWidth","getStringUnitWidth","internal","scaleFactor","titleTextX","pageSize","getWidth","setFontSize","text","pdfHeight","getHeight","pdfWidth","x","y","addImage","websiteName","textWidth","textX","textY","save","compress","quality","src","result","readAsDataURL","catch","error","console","className","children","AiFillPrinter","setBaseLayers","baseLayers","layersItems","setSingleBaseLayer","singlebaseLayer","singleLayerItems","handleBaseLayerChange","event","value","target","checked","prevLayers","concat","_toConsumableArray","filter","layer","handleSingleBaseLayerChange","_useState","useState","_useState2","_slicedToArray","isLayerControlVisible","setLayerControlVisible","_jsxs","_Fragment","onMouseEnter","alt","onMouseLeave","map","item","type","onChange","label","includes","Legend","legendData","color","backgroundColor","lat","lng","mousePosition","setMousePosition","useRef","HandleMouseHover","useMapEvents","mousemove","e","latlng","_useState3","_useState4","_useState5","_useState6","ref","MapContainer","center","fullscreenControl","zoom","setInitialMapZoom","setWindowWidth","attributionControl","scrollWheelZoom","zoomDelta","zoomSnap","minZoom","keyboard","dragging","setDragging","doubleClickZoom","maxZoom","ScaleControl","LayerControlBtn","FeatureGroup","GeoJSON","data","CORONA","onEachFeature","feature","on","properties","Name","popupContent","TOTAL_CONF","CURED","DEATHS","bindTooltip","sticky","openTooltip","closeTooltip","fillColor","density","weight","opacity","dashArray","fillOpacity","MALARIA","CASES","ExportMapButton","position","bottom","right","padding","toFixed","border","margin","borderRadius","mapZoom","createPathComponent","ctx","_objectWithoutProperties","_excluded","group","LeafletFeatureGroup","createElementObject","extendContext","layerContainer","overlayContainer"],"sourceRoot":""}